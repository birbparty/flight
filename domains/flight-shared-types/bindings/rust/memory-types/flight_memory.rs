// Generated by `wit-bindgen` 0.42.1. DO NOT EDIT!
// Options used:
#[allow(dead_code, clippy::all)]
pub mod exports {
  pub mod flight {
    pub mod memory {
      /// Core memory management types for Flight-Core and V6R integration
      ///
      /// This interface provides the foundational memory types needed for:
      /// - V6R VM resource management and tracking
      /// - Flight-Core platform memory adaptation (16MB to 2GB+)
      /// - Cross-language type safety (TypeScript, Go, Rust, C++17)
      /// - Real-time memory monitoring and enforcement
      #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
      pub mod memory_types {
        #[used]
        #[doc(hidden)]
        static __FORCE_SECTION_REF: fn() =
        super::super::super::super::__link_custom_section_describing_imports;
        
        use super::super::super::super::_rt;
        /// Memory size representation with human-readable formatting
        ///
        /// Used throughout both ecosystems for consistent memory measurement
        #[derive(Clone)]
        pub struct MemorySize {
          /// Raw byte count - allows precise calculations
          pub bytes: u64,
          /// Human-readable format: "16MB", "512KB", "2GB", etc.
          /// Critical for V6R UI components and logging
          pub human_readable: _rt::String,
        }
        impl ::core::fmt::Debug for MemorySize {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("MemorySize").field("bytes", &self.bytes).field("human-readable", &self.human_readable).finish()
          }
        }
        /// Memory usage snapshot for real-time monitoring
        ///
        /// V6R uses this for WebSocket memory updates and UI display
        /// Flight-Core uses this for platform memory adaptation
        #[derive(Clone)]
        pub struct MemoryUsageSnapshot {
          /// Timestamp when snapshot was taken (Unix timestamp)
          pub timestamp: u64,
          /// Session identifier (V6R session or Flight-Core component instance)
          pub session_id: _rt::String,
          /// Platform identifier for memory constraints
          pub platform: _rt::String,
          /// Total available memory for this context
          pub total: MemorySize,
          /// Currently used memory
          pub used: MemorySize,
          /// Available memory (calculated: total - used)
          pub available: MemorySize,
          /// Memory fragmentation ratio (0.0-1.0)
          /// Critical for Flight-Core constrained platforms
          pub fragmentation_ratio: f32,
        }
        impl ::core::fmt::Debug for MemoryUsageSnapshot {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("MemoryUsageSnapshot").field("timestamp", &self.timestamp).field("session-id", &self.session_id).field("platform", &self.platform).field("total", &self.total).field("used", &self.used).field("available", &self.available).field("fragmentation-ratio", &self.fragmentation_ratio).finish()
          }
        }
        /// Platform-specific memory profiles
        ///
        /// Enables both Flight-Core and V6R to adapt behavior based on memory constraints
        #[derive(Clone)]
        pub enum PlatformProfile {
          /// Dreamcast: 16MB baseline (PlayStation 1 dropped for C++17)
          Dreamcast(MemorySize),
          /// PlayStation Portable: 32-64MB depending on model
          Psp(MemorySize),
          /// Sony PlayStation Vita: 512MB
          Vita(MemorySize),
          /// V6R Small VM: 512MB for lightweight development
          V6rSmall(MemorySize),
          /// V6R Medium VM: 1GB for standard development
          V6rMedium(MemorySize),
          /// V6R Large VM: 2GB+ for intensive development
          V6rLarge(MemorySize),
          /// Custom platform with specified memory
          Custom(MemorySize),
        }
        impl ::core::fmt::Debug for PlatformProfile {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              PlatformProfile::Dreamcast(e) => {
                f.debug_tuple("PlatformProfile::Dreamcast").field(e).finish()
              }
              PlatformProfile::Psp(e) => {
                f.debug_tuple("PlatformProfile::Psp").field(e).finish()
              }
              PlatformProfile::Vita(e) => {
                f.debug_tuple("PlatformProfile::Vita").field(e).finish()
              }
              PlatformProfile::V6rSmall(e) => {
                f.debug_tuple("PlatformProfile::V6rSmall").field(e).finish()
              }
              PlatformProfile::V6rMedium(e) => {
                f.debug_tuple("PlatformProfile::V6rMedium").field(e).finish()
              }
              PlatformProfile::V6rLarge(e) => {
                f.debug_tuple("PlatformProfile::V6rLarge").field(e).finish()
              }
              PlatformProfile::Custom(e) => {
                f.debug_tuple("PlatformProfile::Custom").field(e).finish()
              }
            }
          }
        }
        /// Memory allocation purposes for categorization
        ///
        /// Enables both systems to track memory usage by category
        #[repr(u8)]
        #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
        pub enum MemoryPurpose {
          /// VM heap memory (V6R primary use case)
          VmHeap,
          /// Component stack memory (Flight-Core components)
          ComponentStack,
          /// Asset cache (textures, audio, etc.)
          AssetCache,
          /// JIT compiled code cache
          JitCodeCache,
          /// System reserved memory
          SystemReserved,
          /// WebAssembly linear memory
          WasmLinear,
          /// Network buffers
          NetworkBuffers,
          /// Temporary/scratch memory
          Temporary,
        }
        impl ::core::fmt::Debug for MemoryPurpose {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              MemoryPurpose::VmHeap => {
                f.debug_tuple("MemoryPurpose::VmHeap").finish()
              }
              MemoryPurpose::ComponentStack => {
                f.debug_tuple("MemoryPurpose::ComponentStack").finish()
              }
              MemoryPurpose::AssetCache => {
                f.debug_tuple("MemoryPurpose::AssetCache").finish()
              }
              MemoryPurpose::JitCodeCache => {
                f.debug_tuple("MemoryPurpose::JitCodeCache").finish()
              }
              MemoryPurpose::SystemReserved => {
                f.debug_tuple("MemoryPurpose::SystemReserved").finish()
              }
              MemoryPurpose::WasmLinear => {
                f.debug_tuple("MemoryPurpose::WasmLinear").finish()
              }
              MemoryPurpose::NetworkBuffers => {
                f.debug_tuple("MemoryPurpose::NetworkBuffers").finish()
              }
              MemoryPurpose::Temporary => {
                f.debug_tuple("MemoryPurpose::Temporary").finish()
              }
            }
          }
        }

        impl MemoryPurpose{
          #[doc(hidden)]
          pub unsafe fn _lift(val: u8) -> MemoryPurpose{
            if !cfg!(debug_assertions) {
              return unsafe { ::core::mem::transmute(val) };
            }

            match val {
              0 => MemoryPurpose::VmHeap,
              1 => MemoryPurpose::ComponentStack,
              2 => MemoryPurpose::AssetCache,
              3 => MemoryPurpose::JitCodeCache,
              4 => MemoryPurpose::SystemReserved,
              5 => MemoryPurpose::WasmLinear,
              6 => MemoryPurpose::NetworkBuffers,
              7 => MemoryPurpose::Temporary,

              _ => panic!("invalid enum discriminant"),
            }
          }
        }

        /// Memory allocation tracking record
        ///
        /// V6R uses this for VM resource accounting
        /// Flight-Core uses this for component memory management
        #[derive(Clone)]
        pub struct MemoryAllocation {
          /// Unique allocation identifier
          pub id: _rt::String,
          /// Session this allocation belongs to
          pub session_id: _rt::String,
          /// Size of the allocation
          pub size: MemorySize,
          /// Purpose/category of this allocation
          pub purpose: MemoryPurpose,
          /// When allocation was created (Unix timestamp)
          pub allocated_at: u64,
          /// When allocation was freed (None if still active)
          pub freed_at: Option<u64>,
        }
        impl ::core::fmt::Debug for MemoryAllocation {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("MemoryAllocation").field("id", &self.id).field("session-id", &self.session_id).field("size", &self.size).field("purpose", &self.purpose).field("allocated-at", &self.allocated_at).field("freed-at", &self.freed_at).finish()
          }
        }
        /// Memory pressure levels for adaptive behavior
        ///
        /// Flight-Core uses for platform adaptation
        /// V6R uses for VM scaling decisions
        #[repr(u8)]
        #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
        pub enum MemoryPressure {
          /// Plenty of memory available
          Low,
          /// Memory usage getting high but manageable
          Medium,
          /// Memory critically low - aggressive cleanup needed
          High,
          /// Out of memory - emergency measures required
          Critical,
        }
        impl ::core::fmt::Debug for MemoryPressure {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              MemoryPressure::Low => {
                f.debug_tuple("MemoryPressure::Low").finish()
              }
              MemoryPressure::Medium => {
                f.debug_tuple("MemoryPressure::Medium").finish()
              }
              MemoryPressure::High => {
                f.debug_tuple("MemoryPressure::High").finish()
              }
              MemoryPressure::Critical => {
                f.debug_tuple("MemoryPressure::Critical").finish()
              }
            }
          }
        }

        impl MemoryPressure{
          #[doc(hidden)]
          pub unsafe fn _lift(val: u8) -> MemoryPressure{
            if !cfg!(debug_assertions) {
              return unsafe { ::core::mem::transmute(val) };
            }

            match val {
              0 => MemoryPressure::Low,
              1 => MemoryPressure::Medium,
              2 => MemoryPressure::High,
              3 => MemoryPressure::Critical,

              _ => panic!("invalid enum discriminant"),
            }
          }
        }

        /// Memory limits configuration
        ///
        /// V6R uses for VM resource enforcement
        /// Flight-Core uses for platform constraint adaptation
        #[derive(Clone)]
        pub struct MemoryLimits {
          /// Maximum memory for VM/component heap
          pub heap_max: MemorySize,
          /// Maximum memory for stack
          pub stack_max: MemorySize,
          /// Maximum memory for caching
          pub cache_max: MemorySize,
          /// Soft limit before warnings
          pub soft_limit: MemorySize,
          /// Hard limit before allocation failures
          pub hard_limit: MemorySize,
        }
        impl ::core::fmt::Debug for MemoryLimits {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("MemoryLimits").field("heap-max", &self.heap_max).field("stack-max", &self.stack_max).field("cache-max", &self.cache_max).field("soft-limit", &self.soft_limit).field("hard-limit", &self.hard_limit).finish()
          }
        }
        /// Memory error codes
        #[repr(u8)]
        #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
        pub enum MemoryErrorCode {
          /// Insufficient memory available
          InsufficientMemory,
          /// Memory limit exceeded
          LimitExceeded,
          /// Invalid memory size requested
          InvalidSize,
          /// Memory allocation failed
          AllocationFailed,
          /// Memory already freed
          AlreadyFreed,
          /// Invalid allocation ID
          InvalidAllocation,
          /// Platform not supported
          UnsupportedPlatform,
          /// Memory fragmentation too high
          FragmentationError,
        }
        impl ::core::fmt::Debug for MemoryErrorCode {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              MemoryErrorCode::InsufficientMemory => {
                f.debug_tuple("MemoryErrorCode::InsufficientMemory").finish()
              }
              MemoryErrorCode::LimitExceeded => {
                f.debug_tuple("MemoryErrorCode::LimitExceeded").finish()
              }
              MemoryErrorCode::InvalidSize => {
                f.debug_tuple("MemoryErrorCode::InvalidSize").finish()
              }
              MemoryErrorCode::AllocationFailed => {
                f.debug_tuple("MemoryErrorCode::AllocationFailed").finish()
              }
              MemoryErrorCode::AlreadyFreed => {
                f.debug_tuple("MemoryErrorCode::AlreadyFreed").finish()
              }
              MemoryErrorCode::InvalidAllocation => {
                f.debug_tuple("MemoryErrorCode::InvalidAllocation").finish()
              }
              MemoryErrorCode::UnsupportedPlatform => {
                f.debug_tuple("MemoryErrorCode::UnsupportedPlatform").finish()
              }
              MemoryErrorCode::FragmentationError => {
                f.debug_tuple("MemoryErrorCode::FragmentationError").finish()
              }
            }
          }
        }

        impl MemoryErrorCode{
          #[doc(hidden)]
          pub unsafe fn _lift(val: u8) -> MemoryErrorCode{
            if !cfg!(debug_assertions) {
              return unsafe { ::core::mem::transmute(val) };
            }

            match val {
              0 => MemoryErrorCode::InsufficientMemory,
              1 => MemoryErrorCode::LimitExceeded,
              2 => MemoryErrorCode::InvalidSize,
              3 => MemoryErrorCode::AllocationFailed,
              4 => MemoryErrorCode::AlreadyFreed,
              5 => MemoryErrorCode::InvalidAllocation,
              6 => MemoryErrorCode::UnsupportedPlatform,
              7 => MemoryErrorCode::FragmentationError,

              _ => panic!("invalid enum discriminant"),
            }
          }
        }

        /// Memory-specific error types
        ///
        /// Comprehensive error handling for memory operations
        #[derive(Clone)]
        pub struct MemoryError {
          /// Error code for programmatic handling
          pub code: MemoryErrorCode,
          /// Human-readable error message
          pub message: _rt::String,
          /// Additional context/details
          pub details: Option<_rt::String>,
          /// When error occurred
          pub timestamp: u64,
        }
        impl ::core::fmt::Debug for MemoryError {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("MemoryError").field("code", &self.code).field("message", &self.message).field("details", &self.details).field("timestamp", &self.timestamp).finish()
          }
        }
        impl ::core::fmt::Display for MemoryError {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            write!(f, "{:?}", self)
          }
        }
        impl std::error::Error for MemoryError {}
        #[doc(hidden)]

        macro_rules! __export_flight_memory_memory_types_1_0_0_cabi{
          ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          };);
        }
        #[doc(hidden)]
        pub(crate) use __export_flight_memory_memory_types_1_0_0_cabi;

      }

      /// Memory management operations interface
      ///
      /// Core functions for memory tracking and management
      #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
      pub mod memory_operations {
        #[used]
        #[doc(hidden)]
        static __FORCE_SECTION_REF: fn() =
        super::super::super::super::__link_custom_section_describing_imports;
        
        use super::super::super::super::_rt;
        pub type MemorySize = super::super::super::super::exports::flight::memory::memory_types::MemorySize;
        pub type MemoryAllocation = super::super::super::super::exports::flight::memory::memory_types::MemoryAllocation;
        pub type MemoryPurpose = super::super::super::super::exports::flight::memory::memory_types::MemoryPurpose;
        pub type MemoryUsageSnapshot = super::super::super::super::exports::flight::memory::memory_types::MemoryUsageSnapshot;
        pub type MemoryError = super::super::super::super::exports::flight::memory::memory_types::MemoryError;
        pub type MemoryLimits = super::super::super::super::exports::flight::memory::memory_types::MemoryLimits;
        pub type MemoryPressure = super::super::super::super::exports::flight::memory::memory_types::MemoryPressure;
        pub type PlatformProfile = super::super::super::super::exports::flight::memory::memory_types::PlatformProfile;
        #[doc(hidden)]
        #[allow(non_snake_case, unused_unsafe)]
        pub unsafe fn _export_create_allocation_cabi<T: Guest>(arg0: *mut u8,arg1: usize,arg2: i64,arg3: *mut u8,arg4: usize,arg5: i32,) -> *mut u8 { unsafe {#[cfg(target_arch="wasm32")]
        _rt::run_ctors_once();let result2 = {
          let len0 = arg1;
          let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
          let len1 = arg4;
          let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
          T::create_allocation(_rt::string_lift(bytes0), super::super::super::super::exports::flight::memory::memory_types::MemorySize{
            bytes: arg2 as u64,
            human_readable: _rt::string_lift(bytes1),
          }, super::super::super::super::exports::flight::memory::memory_types::MemoryPurpose::_lift(arg5 as u8))
        };
        let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
        match result2 {
          Ok(e) => { {
            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
            let super::super::super::super::exports::flight::memory::memory_types::MemoryAllocation{ id:id4, session_id:session_id4, size:size4, purpose:purpose4, allocated_at:allocated_at4, freed_at:freed_at4, } = e;
            let vec5 = (id4.into_bytes()).into_boxed_slice();
            let ptr5 = vec5.as_ptr().cast::<u8>();
            let len5 = vec5.len();
            ::core::mem::forget(vec5);
            *ptr3.add(8+1*::core::mem::size_of::<*const u8>()).cast::<usize>() = len5;
            *ptr3.add(8).cast::<*mut u8>() = ptr5.cast_mut();
            let vec6 = (session_id4.into_bytes()).into_boxed_slice();
            let ptr6 = vec6.as_ptr().cast::<u8>();
            let len6 = vec6.len();
            ::core::mem::forget(vec6);
            *ptr3.add(8+3*::core::mem::size_of::<*const u8>()).cast::<usize>() = len6;
            *ptr3.add(8+2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr6.cast_mut();
            let super::super::super::super::exports::flight::memory::memory_types::MemorySize{ bytes:bytes7, human_readable:human_readable7, } = size4;
            *ptr3.add(8+4*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(bytes7);
            let vec8 = (human_readable7.into_bytes()).into_boxed_slice();
            let ptr8 = vec8.as_ptr().cast::<u8>();
            let len8 = vec8.len();
            ::core::mem::forget(vec8);
            *ptr3.add(16+5*::core::mem::size_of::<*const u8>()).cast::<usize>() = len8;
            *ptr3.add(16+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr8.cast_mut();
            *ptr3.add(16+6*::core::mem::size_of::<*const u8>()).cast::<u8>() = (purpose4.clone() as i32) as u8;
            *ptr3.add(24+6*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(allocated_at4);
            match freed_at4 {
              Some(e) => {
                *ptr3.add(32+6*::core::mem::size_of::<*const u8>()).cast::<u8>() = (1i32) as u8;
                *ptr3.add(40+6*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(e);
              },
              None => {
                {
                  *ptr3.add(32+6*::core::mem::size_of::<*const u8>()).cast::<u8>() = (0i32) as u8;
                }
              },
            };} },
            Err(e) => { {
              *ptr3.add(0).cast::<u8>() = (1i32) as u8;
              let super::super::super::super::exports::flight::memory::memory_types::MemoryError{ code:code9, message:message9, details:details9, timestamp:timestamp9, } = e;
              *ptr3.add(8).cast::<u8>() = (code9.clone() as i32) as u8;
              let vec10 = (message9.into_bytes()).into_boxed_slice();
              let ptr10 = vec10.as_ptr().cast::<u8>();
              let len10 = vec10.len();
              ::core::mem::forget(vec10);
              *ptr3.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>() = len10;
              *ptr3.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr10.cast_mut();
              match details9 {
                Some(e) => {
                  *ptr3.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (1i32) as u8;
                  let vec11 = (e.into_bytes()).into_boxed_slice();
                  let ptr11 = vec11.as_ptr().cast::<u8>();
                  let len11 = vec11.len();
                  ::core::mem::forget(vec11);
                  *ptr3.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>() = len11;
                  *ptr3.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr11.cast_mut();
                },
                None => {
                  {
                    *ptr3.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (0i32) as u8;
                  }
                },
              };*ptr3.add(8+6*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(timestamp9);
            } },
          };ptr3
        } }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn __post_return_create_allocation<T: Guest>(arg0: *mut u8,) { unsafe {
          let l0 = i32::from(*arg0.add(0).cast::<u8>());
          match l0 {
            0 => {
              let l1 = *arg0.add(8).cast::<*mut u8>();
              let l2 = *arg0.add(8+1*::core::mem::size_of::<*const u8>()).cast::<usize>();
              _rt::cabi_dealloc(l1, l2, 1);
              let l3 = *arg0.add(8+2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
              let l4 = *arg0.add(8+3*::core::mem::size_of::<*const u8>()).cast::<usize>();
              _rt::cabi_dealloc(l3, l4, 1);
              let l5 = *arg0.add(16+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
              let l6 = *arg0.add(16+5*::core::mem::size_of::<*const u8>()).cast::<usize>();
              _rt::cabi_dealloc(l5, l6, 1);
            },
            _ => {
              let l7 = *arg0.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
              let l8 = *arg0.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>();
              _rt::cabi_dealloc(l7, l8, 1);
              let l9 = i32::from(*arg0.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>());
              match l9 {
                0 => (),
                _ => {
                  let l10 = *arg0.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
                  let l11 = *arg0.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>();
                  _rt::cabi_dealloc(l10, l11, 1);
                },
              }
            },
          }
        } }
        #[doc(hidden)]
        #[allow(non_snake_case, unused_unsafe)]
        pub unsafe fn _export_free_allocation_cabi<T: Guest>(arg0: *mut u8,arg1: usize,) -> *mut u8 { unsafe {#[cfg(target_arch="wasm32")]
        _rt::run_ctors_once();let result1 = {
          let len0 = arg1;
          let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
          T::free_allocation(_rt::string_lift(bytes0))
        };
        let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
        match result1 {
          Ok(e) => { {
            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
            *ptr2.add(8).cast::<u8>() = (match e { true => 1, false => 0 }) as u8;
          } },
          Err(e) => { {
            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
            let super::super::super::super::exports::flight::memory::memory_types::MemoryError{ code:code3, message:message3, details:details3, timestamp:timestamp3, } = e;
            *ptr2.add(8).cast::<u8>() = (code3.clone() as i32) as u8;
            let vec4 = (message3.into_bytes()).into_boxed_slice();
            let ptr4 = vec4.as_ptr().cast::<u8>();
            let len4 = vec4.len();
            ::core::mem::forget(vec4);
            *ptr2.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>() = len4;
            *ptr2.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr4.cast_mut();
            match details3 {
              Some(e) => {
                *ptr2.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (1i32) as u8;
                let vec5 = (e.into_bytes()).into_boxed_slice();
                let ptr5 = vec5.as_ptr().cast::<u8>();
                let len5 = vec5.len();
                ::core::mem::forget(vec5);
                *ptr2.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>() = len5;
                *ptr2.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr5.cast_mut();
              },
              None => {
                {
                  *ptr2.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (0i32) as u8;
                }
              },
            };*ptr2.add(8+6*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(timestamp3);
          } },
        };ptr2
      } }
      #[doc(hidden)]
      #[allow(non_snake_case)]
      pub unsafe fn __post_return_free_allocation<T: Guest>(arg0: *mut u8,) { unsafe {
        let l0 = i32::from(*arg0.add(0).cast::<u8>());
        match l0 {
          0 => (),
          _ => {
            let l1 = *arg0.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
            let l2 = *arg0.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>();
            _rt::cabi_dealloc(l1, l2, 1);
            let l3 = i32::from(*arg0.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>());
            match l3 {
              0 => (),
              _ => {
                let l4 = *arg0.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
                let l5 = *arg0.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>();
                _rt::cabi_dealloc(l4, l5, 1);
              },
            }
          },
        }
      } }
      #[doc(hidden)]
      #[allow(non_snake_case, unused_unsafe)]
      pub unsafe fn _export_get_memory_snapshot_cabi<T: Guest>(arg0: *mut u8,arg1: usize,) -> *mut u8 { unsafe {#[cfg(target_arch="wasm32")]
      _rt::run_ctors_once();let result1 = {
        let len0 = arg1;
        let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
        T::get_memory_snapshot(_rt::string_lift(bytes0))
      };
      let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
      match result1 {
        Ok(e) => { {
          *ptr2.add(0).cast::<u8>() = (0i32) as u8;
          let super::super::super::super::exports::flight::memory::memory_types::MemoryUsageSnapshot{ timestamp:timestamp3, session_id:session_id3, platform:platform3, total:total3, used:used3, available:available3, fragmentation_ratio:fragmentation_ratio3, } = e;
          *ptr2.add(8).cast::<i64>() = _rt::as_i64(timestamp3);
          let vec4 = (session_id3.into_bytes()).into_boxed_slice();
          let ptr4 = vec4.as_ptr().cast::<u8>();
          let len4 = vec4.len();
          ::core::mem::forget(vec4);
          *ptr2.add(16+1*::core::mem::size_of::<*const u8>()).cast::<usize>() = len4;
          *ptr2.add(16).cast::<*mut u8>() = ptr4.cast_mut();
          let vec5 = (platform3.into_bytes()).into_boxed_slice();
          let ptr5 = vec5.as_ptr().cast::<u8>();
          let len5 = vec5.len();
          ::core::mem::forget(vec5);
          *ptr2.add(16+3*::core::mem::size_of::<*const u8>()).cast::<usize>() = len5;
          *ptr2.add(16+2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr5.cast_mut();
          let super::super::super::super::exports::flight::memory::memory_types::MemorySize{ bytes:bytes6, human_readable:human_readable6, } = total3;
          *ptr2.add(16+4*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(bytes6);
          let vec7 = (human_readable6.into_bytes()).into_boxed_slice();
          let ptr7 = vec7.as_ptr().cast::<u8>();
          let len7 = vec7.len();
          ::core::mem::forget(vec7);
          *ptr2.add(24+5*::core::mem::size_of::<*const u8>()).cast::<usize>() = len7;
          *ptr2.add(24+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr7.cast_mut();
          let super::super::super::super::exports::flight::memory::memory_types::MemorySize{ bytes:bytes8, human_readable:human_readable8, } = used3;
          *ptr2.add(24+6*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(bytes8);
          let vec9 = (human_readable8.into_bytes()).into_boxed_slice();
          let ptr9 = vec9.as_ptr().cast::<u8>();
          let len9 = vec9.len();
          ::core::mem::forget(vec9);
          *ptr2.add(32+7*::core::mem::size_of::<*const u8>()).cast::<usize>() = len9;
          *ptr2.add(32+6*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr9.cast_mut();
          let super::super::super::super::exports::flight::memory::memory_types::MemorySize{ bytes:bytes10, human_readable:human_readable10, } = available3;
          *ptr2.add(32+8*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(bytes10);
          let vec11 = (human_readable10.into_bytes()).into_boxed_slice();
          let ptr11 = vec11.as_ptr().cast::<u8>();
          let len11 = vec11.len();
          ::core::mem::forget(vec11);
          *ptr2.add(40+9*::core::mem::size_of::<*const u8>()).cast::<usize>() = len11;
          *ptr2.add(40+8*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr11.cast_mut();
          *ptr2.add(40+10*::core::mem::size_of::<*const u8>()).cast::<f32>() = _rt::as_f32(fragmentation_ratio3);
        } },
        Err(e) => { {
          *ptr2.add(0).cast::<u8>() = (1i32) as u8;
          let super::super::super::super::exports::flight::memory::memory_types::MemoryError{ code:code12, message:message12, details:details12, timestamp:timestamp12, } = e;
          *ptr2.add(8).cast::<u8>() = (code12.clone() as i32) as u8;
          let vec13 = (message12.into_bytes()).into_boxed_slice();
          let ptr13 = vec13.as_ptr().cast::<u8>();
          let len13 = vec13.len();
          ::core::mem::forget(vec13);
          *ptr2.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>() = len13;
          *ptr2.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr13.cast_mut();
          match details12 {
            Some(e) => {
              *ptr2.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (1i32) as u8;
              let vec14 = (e.into_bytes()).into_boxed_slice();
              let ptr14 = vec14.as_ptr().cast::<u8>();
              let len14 = vec14.len();
              ::core::mem::forget(vec14);
              *ptr2.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>() = len14;
              *ptr2.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr14.cast_mut();
            },
            None => {
              {
                *ptr2.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (0i32) as u8;
              }
            },
          };*ptr2.add(8+6*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(timestamp12);
        } },
      };ptr2
    } }
    #[doc(hidden)]
    #[allow(non_snake_case)]
    pub unsafe fn __post_return_get_memory_snapshot<T: Guest>(arg0: *mut u8,) { unsafe {
      let l0 = i32::from(*arg0.add(0).cast::<u8>());
      match l0 {
        0 => {
          let l1 = *arg0.add(16).cast::<*mut u8>();
          let l2 = *arg0.add(16+1*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l1, l2, 1);
          let l3 = *arg0.add(16+2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l4 = *arg0.add(16+3*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l3, l4, 1);
          let l5 = *arg0.add(24+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l6 = *arg0.add(24+5*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l5, l6, 1);
          let l7 = *arg0.add(32+6*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l8 = *arg0.add(32+7*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l7, l8, 1);
          let l9 = *arg0.add(40+8*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l10 = *arg0.add(40+9*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l9, l10, 1);
        },
        _ => {
          let l11 = *arg0.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l12 = *arg0.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l11, l12, 1);
          let l13 = i32::from(*arg0.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>());
          match l13 {
            0 => (),
            _ => {
              let l14 = *arg0.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
              let l15 = *arg0.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>();
              _rt::cabi_dealloc(l14, l15, 1);
            },
          }
        },
      }
    } }
    #[doc(hidden)]
    #[allow(non_snake_case, unused_unsafe)]
    pub unsafe fn _export_get_platform_profile_cabi<T: Guest>(arg0: *mut u8,arg1: usize,) -> *mut u8 { unsafe {#[cfg(target_arch="wasm32")]
    _rt::run_ctors_once();let result1 = {
      let len0 = arg1;
      let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
      T::get_platform_profile(_rt::string_lift(bytes0))
    };
    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
    match result1 {
      Ok(e) => { {
        *ptr2.add(0).cast::<u8>() = (0i32) as u8;
        use super::super::super::super::exports::flight::memory::memory_types::PlatformProfile as V17;
        match e {
          V17::Dreamcast(e) => {
            *ptr2.add(8).cast::<u8>() = (0i32) as u8;
            let super::super::super::super::exports::flight::memory::memory_types::MemorySize{ bytes:bytes3, human_readable:human_readable3, } = e;
            *ptr2.add(16).cast::<i64>() = _rt::as_i64(bytes3);
            let vec4 = (human_readable3.into_bytes()).into_boxed_slice();
            let ptr4 = vec4.as_ptr().cast::<u8>();
            let len4 = vec4.len();
            ::core::mem::forget(vec4);
            *ptr2.add(24+1*::core::mem::size_of::<*const u8>()).cast::<usize>() = len4;
            *ptr2.add(24).cast::<*mut u8>() = ptr4.cast_mut();
          },
          V17::Psp(e) => {
            *ptr2.add(8).cast::<u8>() = (1i32) as u8;
            let super::super::super::super::exports::flight::memory::memory_types::MemorySize{ bytes:bytes5, human_readable:human_readable5, } = e;
            *ptr2.add(16).cast::<i64>() = _rt::as_i64(bytes5);
            let vec6 = (human_readable5.into_bytes()).into_boxed_slice();
            let ptr6 = vec6.as_ptr().cast::<u8>();
            let len6 = vec6.len();
            ::core::mem::forget(vec6);
            *ptr2.add(24+1*::core::mem::size_of::<*const u8>()).cast::<usize>() = len6;
            *ptr2.add(24).cast::<*mut u8>() = ptr6.cast_mut();
          },
          V17::Vita(e) => {
            *ptr2.add(8).cast::<u8>() = (2i32) as u8;
            let super::super::super::super::exports::flight::memory::memory_types::MemorySize{ bytes:bytes7, human_readable:human_readable7, } = e;
            *ptr2.add(16).cast::<i64>() = _rt::as_i64(bytes7);
            let vec8 = (human_readable7.into_bytes()).into_boxed_slice();
            let ptr8 = vec8.as_ptr().cast::<u8>();
            let len8 = vec8.len();
            ::core::mem::forget(vec8);
            *ptr2.add(24+1*::core::mem::size_of::<*const u8>()).cast::<usize>() = len8;
            *ptr2.add(24).cast::<*mut u8>() = ptr8.cast_mut();
          },
          V17::V6rSmall(e) => {
            *ptr2.add(8).cast::<u8>() = (3i32) as u8;
            let super::super::super::super::exports::flight::memory::memory_types::MemorySize{ bytes:bytes9, human_readable:human_readable9, } = e;
            *ptr2.add(16).cast::<i64>() = _rt::as_i64(bytes9);
            let vec10 = (human_readable9.into_bytes()).into_boxed_slice();
            let ptr10 = vec10.as_ptr().cast::<u8>();
            let len10 = vec10.len();
            ::core::mem::forget(vec10);
            *ptr2.add(24+1*::core::mem::size_of::<*const u8>()).cast::<usize>() = len10;
            *ptr2.add(24).cast::<*mut u8>() = ptr10.cast_mut();
          },
          V17::V6rMedium(e) => {
            *ptr2.add(8).cast::<u8>() = (4i32) as u8;
            let super::super::super::super::exports::flight::memory::memory_types::MemorySize{ bytes:bytes11, human_readable:human_readable11, } = e;
            *ptr2.add(16).cast::<i64>() = _rt::as_i64(bytes11);
            let vec12 = (human_readable11.into_bytes()).into_boxed_slice();
            let ptr12 = vec12.as_ptr().cast::<u8>();
            let len12 = vec12.len();
            ::core::mem::forget(vec12);
            *ptr2.add(24+1*::core::mem::size_of::<*const u8>()).cast::<usize>() = len12;
            *ptr2.add(24).cast::<*mut u8>() = ptr12.cast_mut();
          },
          V17::V6rLarge(e) => {
            *ptr2.add(8).cast::<u8>() = (5i32) as u8;
            let super::super::super::super::exports::flight::memory::memory_types::MemorySize{ bytes:bytes13, human_readable:human_readable13, } = e;
            *ptr2.add(16).cast::<i64>() = _rt::as_i64(bytes13);
            let vec14 = (human_readable13.into_bytes()).into_boxed_slice();
            let ptr14 = vec14.as_ptr().cast::<u8>();
            let len14 = vec14.len();
            ::core::mem::forget(vec14);
            *ptr2.add(24+1*::core::mem::size_of::<*const u8>()).cast::<usize>() = len14;
            *ptr2.add(24).cast::<*mut u8>() = ptr14.cast_mut();
          },
          V17::Custom(e) => {
            *ptr2.add(8).cast::<u8>() = (6i32) as u8;
            let super::super::super::super::exports::flight::memory::memory_types::MemorySize{ bytes:bytes15, human_readable:human_readable15, } = e;
            *ptr2.add(16).cast::<i64>() = _rt::as_i64(bytes15);
            let vec16 = (human_readable15.into_bytes()).into_boxed_slice();
            let ptr16 = vec16.as_ptr().cast::<u8>();
            let len16 = vec16.len();
            ::core::mem::forget(vec16);
            *ptr2.add(24+1*::core::mem::size_of::<*const u8>()).cast::<usize>() = len16;
            *ptr2.add(24).cast::<*mut u8>() = ptr16.cast_mut();
          },
        }
      } },
      Err(e) => { {
        *ptr2.add(0).cast::<u8>() = (1i32) as u8;
        let super::super::super::super::exports::flight::memory::memory_types::MemoryError{ code:code18, message:message18, details:details18, timestamp:timestamp18, } = e;
        *ptr2.add(8).cast::<u8>() = (code18.clone() as i32) as u8;
        let vec19 = (message18.into_bytes()).into_boxed_slice();
        let ptr19 = vec19.as_ptr().cast::<u8>();
        let len19 = vec19.len();
        ::core::mem::forget(vec19);
        *ptr2.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>() = len19;
        *ptr2.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr19.cast_mut();
        match details18 {
          Some(e) => {
            *ptr2.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (1i32) as u8;
            let vec20 = (e.into_bytes()).into_boxed_slice();
            let ptr20 = vec20.as_ptr().cast::<u8>();
            let len20 = vec20.len();
            ::core::mem::forget(vec20);
            *ptr2.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>() = len20;
            *ptr2.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr20.cast_mut();
          },
          None => {
            {
              *ptr2.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (0i32) as u8;
            }
          },
        };*ptr2.add(8+6*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(timestamp18);
      } },
    };ptr2
  } }
  #[doc(hidden)]
  #[allow(non_snake_case)]
  pub unsafe fn __post_return_get_platform_profile<T: Guest>(arg0: *mut u8,) { unsafe {
    let l0 = i32::from(*arg0.add(0).cast::<u8>());
    match l0 {
      0 => {
        let l1 = i32::from(*arg0.add(8).cast::<u8>());
        match l1 {
          0 => {
            let l2 = *arg0.add(24).cast::<*mut u8>();
            let l3 = *arg0.add(24+1*::core::mem::size_of::<*const u8>()).cast::<usize>();
            _rt::cabi_dealloc(l2, l3, 1);
          },
          1 => {
            let l4 = *arg0.add(24).cast::<*mut u8>();
            let l5 = *arg0.add(24+1*::core::mem::size_of::<*const u8>()).cast::<usize>();
            _rt::cabi_dealloc(l4, l5, 1);
          },
          2 => {
            let l6 = *arg0.add(24).cast::<*mut u8>();
            let l7 = *arg0.add(24+1*::core::mem::size_of::<*const u8>()).cast::<usize>();
            _rt::cabi_dealloc(l6, l7, 1);
          },
          3 => {
            let l8 = *arg0.add(24).cast::<*mut u8>();
            let l9 = *arg0.add(24+1*::core::mem::size_of::<*const u8>()).cast::<usize>();
            _rt::cabi_dealloc(l8, l9, 1);
          },
          4 => {
            let l10 = *arg0.add(24).cast::<*mut u8>();
            let l11 = *arg0.add(24+1*::core::mem::size_of::<*const u8>()).cast::<usize>();
            _rt::cabi_dealloc(l10, l11, 1);
          },
          5 => {
            let l12 = *arg0.add(24).cast::<*mut u8>();
            let l13 = *arg0.add(24+1*::core::mem::size_of::<*const u8>()).cast::<usize>();
            _rt::cabi_dealloc(l12, l13, 1);
          },
          _ => {
            let l14 = *arg0.add(24).cast::<*mut u8>();
            let l15 = *arg0.add(24+1*::core::mem::size_of::<*const u8>()).cast::<usize>();
            _rt::cabi_dealloc(l14, l15, 1);
          },
        }
      },
      _ => {
        let l16 = *arg0.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
        let l17 = *arg0.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>();
        _rt::cabi_dealloc(l16, l17, 1);
        let l18 = i32::from(*arg0.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>());
        match l18 {
          0 => (),
          _ => {
            let l19 = *arg0.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
            let l20 = *arg0.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>();
            _rt::cabi_dealloc(l19, l20, 1);
          },
        }
      },
    }
  } }
  #[doc(hidden)]
  #[allow(non_snake_case, unused_unsafe)]
  pub unsafe fn _export_set_memory_limits_cabi<T: Guest>(arg0: *mut u8,) -> *mut u8 { unsafe {#[cfg(target_arch="wasm32")]
  _rt::run_ctors_once();let result23 = {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
    let len2 = l1;
    let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
    let l3 = *arg0.add(2*::core::mem::size_of::<*const u8>()).cast::<i64>();
    let l4 = *arg0.add(8+2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
    let l5 = *arg0.add(8+3*::core::mem::size_of::<*const u8>()).cast::<usize>();
    let len6 = l5;
    let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
    let l7 = *arg0.add(8+4*::core::mem::size_of::<*const u8>()).cast::<i64>();
    let l8 = *arg0.add(16+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
    let l9 = *arg0.add(16+5*::core::mem::size_of::<*const u8>()).cast::<usize>();
    let len10 = l9;
    let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);
    let l11 = *arg0.add(16+6*::core::mem::size_of::<*const u8>()).cast::<i64>();
    let l12 = *arg0.add(24+6*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
    let l13 = *arg0.add(24+7*::core::mem::size_of::<*const u8>()).cast::<usize>();
    let len14 = l13;
    let bytes14 = _rt::Vec::from_raw_parts(l12.cast(), len14, len14);
    let l15 = *arg0.add(24+8*::core::mem::size_of::<*const u8>()).cast::<i64>();
    let l16 = *arg0.add(32+8*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
    let l17 = *arg0.add(32+9*::core::mem::size_of::<*const u8>()).cast::<usize>();
    let len18 = l17;
    let bytes18 = _rt::Vec::from_raw_parts(l16.cast(), len18, len18);
    let l19 = *arg0.add(32+10*::core::mem::size_of::<*const u8>()).cast::<i64>();
    let l20 = *arg0.add(40+10*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
    let l21 = *arg0.add(40+11*::core::mem::size_of::<*const u8>()).cast::<usize>();
    let len22 = l21;
    let bytes22 = _rt::Vec::from_raw_parts(l20.cast(), len22, len22);
    T::set_memory_limits(_rt::string_lift(bytes2), super::super::super::super::exports::flight::memory::memory_types::MemoryLimits{
      heap_max: super::super::super::super::exports::flight::memory::memory_types::MemorySize{
        bytes: l3 as u64,
        human_readable: _rt::string_lift(bytes6),
      },
      stack_max: super::super::super::super::exports::flight::memory::memory_types::MemorySize{
        bytes: l7 as u64,
        human_readable: _rt::string_lift(bytes10),
      },
      cache_max: super::super::super::super::exports::flight::memory::memory_types::MemorySize{
        bytes: l11 as u64,
        human_readable: _rt::string_lift(bytes14),
      },
      soft_limit: super::super::super::super::exports::flight::memory::memory_types::MemorySize{
        bytes: l15 as u64,
        human_readable: _rt::string_lift(bytes18),
      },
      hard_limit: super::super::super::super::exports::flight::memory::memory_types::MemorySize{
        bytes: l19 as u64,
        human_readable: _rt::string_lift(bytes22),
      },
    })
  };
  _rt::cabi_dealloc(arg0, 40+12*::core::mem::size_of::<*const u8>(), 8);
  let ptr24 = (&raw mut _RET_AREA.0).cast::<u8>();
  match result23 {
    Ok(e) => { {
      *ptr24.add(0).cast::<u8>() = (0i32) as u8;
      *ptr24.add(8).cast::<u8>() = (match e { true => 1, false => 0 }) as u8;
    } },
    Err(e) => { {
      *ptr24.add(0).cast::<u8>() = (1i32) as u8;
      let super::super::super::super::exports::flight::memory::memory_types::MemoryError{ code:code25, message:message25, details:details25, timestamp:timestamp25, } = e;
      *ptr24.add(8).cast::<u8>() = (code25.clone() as i32) as u8;
      let vec26 = (message25.into_bytes()).into_boxed_slice();
      let ptr26 = vec26.as_ptr().cast::<u8>();
      let len26 = vec26.len();
      ::core::mem::forget(vec26);
      *ptr24.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>() = len26;
      *ptr24.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr26.cast_mut();
      match details25 {
        Some(e) => {
          *ptr24.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (1i32) as u8;
          let vec27 = (e.into_bytes()).into_boxed_slice();
          let ptr27 = vec27.as_ptr().cast::<u8>();
          let len27 = vec27.len();
          ::core::mem::forget(vec27);
          *ptr24.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>() = len27;
          *ptr24.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr27.cast_mut();
        },
        None => {
          {
            *ptr24.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (0i32) as u8;
          }
        },
      };*ptr24.add(8+6*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(timestamp25);
    } },
  };ptr24
} }
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_set_memory_limits<T: Guest>(arg0: *mut u8,) { unsafe {
  let l0 = i32::from(*arg0.add(0).cast::<u8>());
  match l0 {
    0 => (),
    _ => {
      let l1 = *arg0.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
      let l2 = *arg0.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>();
      _rt::cabi_dealloc(l1, l2, 1);
      let l3 = i32::from(*arg0.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>());
      match l3 {
        0 => (),
        _ => {
          let l4 = *arg0.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l5 = *arg0.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l4, l5, 1);
        },
      }
    },
  }
} }
#[doc(hidden)]
#[allow(non_snake_case, unused_unsafe)]
pub unsafe fn _export_get_memory_limits_cabi<T: Guest>(arg0: *mut u8,arg1: usize,) -> *mut u8 { unsafe {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result1 = {
  let len0 = arg1;
  let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
  T::get_memory_limits(_rt::string_lift(bytes0))
};
let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
match result1 {
  Ok(e) => { {
    *ptr2.add(0).cast::<u8>() = (0i32) as u8;
    let super::super::super::super::exports::flight::memory::memory_types::MemoryLimits{ heap_max:heap_max3, stack_max:stack_max3, cache_max:cache_max3, soft_limit:soft_limit3, hard_limit:hard_limit3, } = e;
    let super::super::super::super::exports::flight::memory::memory_types::MemorySize{ bytes:bytes4, human_readable:human_readable4, } = heap_max3;
    *ptr2.add(8).cast::<i64>() = _rt::as_i64(bytes4);
    let vec5 = (human_readable4.into_bytes()).into_boxed_slice();
    let ptr5 = vec5.as_ptr().cast::<u8>();
    let len5 = vec5.len();
    ::core::mem::forget(vec5);
    *ptr2.add(16+1*::core::mem::size_of::<*const u8>()).cast::<usize>() = len5;
    *ptr2.add(16).cast::<*mut u8>() = ptr5.cast_mut();
    let super::super::super::super::exports::flight::memory::memory_types::MemorySize{ bytes:bytes6, human_readable:human_readable6, } = stack_max3;
    *ptr2.add(16+2*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(bytes6);
    let vec7 = (human_readable6.into_bytes()).into_boxed_slice();
    let ptr7 = vec7.as_ptr().cast::<u8>();
    let len7 = vec7.len();
    ::core::mem::forget(vec7);
    *ptr2.add(24+3*::core::mem::size_of::<*const u8>()).cast::<usize>() = len7;
    *ptr2.add(24+2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr7.cast_mut();
    let super::super::super::super::exports::flight::memory::memory_types::MemorySize{ bytes:bytes8, human_readable:human_readable8, } = cache_max3;
    *ptr2.add(24+4*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(bytes8);
    let vec9 = (human_readable8.into_bytes()).into_boxed_slice();
    let ptr9 = vec9.as_ptr().cast::<u8>();
    let len9 = vec9.len();
    ::core::mem::forget(vec9);
    *ptr2.add(32+5*::core::mem::size_of::<*const u8>()).cast::<usize>() = len9;
    *ptr2.add(32+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr9.cast_mut();
    let super::super::super::super::exports::flight::memory::memory_types::MemorySize{ bytes:bytes10, human_readable:human_readable10, } = soft_limit3;
    *ptr2.add(32+6*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(bytes10);
    let vec11 = (human_readable10.into_bytes()).into_boxed_slice();
    let ptr11 = vec11.as_ptr().cast::<u8>();
    let len11 = vec11.len();
    ::core::mem::forget(vec11);
    *ptr2.add(40+7*::core::mem::size_of::<*const u8>()).cast::<usize>() = len11;
    *ptr2.add(40+6*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr11.cast_mut();
    let super::super::super::super::exports::flight::memory::memory_types::MemorySize{ bytes:bytes12, human_readable:human_readable12, } = hard_limit3;
    *ptr2.add(40+8*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(bytes12);
    let vec13 = (human_readable12.into_bytes()).into_boxed_slice();
    let ptr13 = vec13.as_ptr().cast::<u8>();
    let len13 = vec13.len();
    ::core::mem::forget(vec13);
    *ptr2.add(48+9*::core::mem::size_of::<*const u8>()).cast::<usize>() = len13;
    *ptr2.add(48+8*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr13.cast_mut();
  } },
  Err(e) => { {
    *ptr2.add(0).cast::<u8>() = (1i32) as u8;
    let super::super::super::super::exports::flight::memory::memory_types::MemoryError{ code:code14, message:message14, details:details14, timestamp:timestamp14, } = e;
    *ptr2.add(8).cast::<u8>() = (code14.clone() as i32) as u8;
    let vec15 = (message14.into_bytes()).into_boxed_slice();
    let ptr15 = vec15.as_ptr().cast::<u8>();
    let len15 = vec15.len();
    ::core::mem::forget(vec15);
    *ptr2.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>() = len15;
    *ptr2.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr15.cast_mut();
    match details14 {
      Some(e) => {
        *ptr2.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (1i32) as u8;
        let vec16 = (e.into_bytes()).into_boxed_slice();
        let ptr16 = vec16.as_ptr().cast::<u8>();
        let len16 = vec16.len();
        ::core::mem::forget(vec16);
        *ptr2.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>() = len16;
        *ptr2.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr16.cast_mut();
      },
      None => {
        {
          *ptr2.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (0i32) as u8;
        }
      },
    };*ptr2.add(8+6*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(timestamp14);
  } },
};ptr2
} }
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_get_memory_limits<T: Guest>(arg0: *mut u8,) { unsafe {
  let l0 = i32::from(*arg0.add(0).cast::<u8>());
  match l0 {
    0 => {
      let l1 = *arg0.add(16).cast::<*mut u8>();
      let l2 = *arg0.add(16+1*::core::mem::size_of::<*const u8>()).cast::<usize>();
      _rt::cabi_dealloc(l1, l2, 1);
      let l3 = *arg0.add(24+2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
      let l4 = *arg0.add(24+3*::core::mem::size_of::<*const u8>()).cast::<usize>();
      _rt::cabi_dealloc(l3, l4, 1);
      let l5 = *arg0.add(32+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
      let l6 = *arg0.add(32+5*::core::mem::size_of::<*const u8>()).cast::<usize>();
      _rt::cabi_dealloc(l5, l6, 1);
      let l7 = *arg0.add(40+6*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
      let l8 = *arg0.add(40+7*::core::mem::size_of::<*const u8>()).cast::<usize>();
      _rt::cabi_dealloc(l7, l8, 1);
      let l9 = *arg0.add(48+8*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
      let l10 = *arg0.add(48+9*::core::mem::size_of::<*const u8>()).cast::<usize>();
      _rt::cabi_dealloc(l9, l10, 1);
    },
    _ => {
      let l11 = *arg0.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
      let l12 = *arg0.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>();
      _rt::cabi_dealloc(l11, l12, 1);
      let l13 = i32::from(*arg0.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>());
      match l13 {
        0 => (),
        _ => {
          let l14 = *arg0.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l15 = *arg0.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l14, l15, 1);
        },
      }
    },
  }
} }
#[doc(hidden)]
#[allow(non_snake_case, unused_unsafe)]
pub unsafe fn _export_get_memory_pressure_cabi<T: Guest>(arg0: *mut u8,arg1: usize,) -> *mut u8 { unsafe {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result1 = {
  let len0 = arg1;
  let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
  T::get_memory_pressure(_rt::string_lift(bytes0))
};
let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
match result1 {
  Ok(e) => { {
    *ptr2.add(0).cast::<u8>() = (0i32) as u8;
    *ptr2.add(8).cast::<u8>() = (e.clone() as i32) as u8;
  } },
  Err(e) => { {
    *ptr2.add(0).cast::<u8>() = (1i32) as u8;
    let super::super::super::super::exports::flight::memory::memory_types::MemoryError{ code:code3, message:message3, details:details3, timestamp:timestamp3, } = e;
    *ptr2.add(8).cast::<u8>() = (code3.clone() as i32) as u8;
    let vec4 = (message3.into_bytes()).into_boxed_slice();
    let ptr4 = vec4.as_ptr().cast::<u8>();
    let len4 = vec4.len();
    ::core::mem::forget(vec4);
    *ptr2.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>() = len4;
    *ptr2.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr4.cast_mut();
    match details3 {
      Some(e) => {
        *ptr2.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (1i32) as u8;
        let vec5 = (e.into_bytes()).into_boxed_slice();
        let ptr5 = vec5.as_ptr().cast::<u8>();
        let len5 = vec5.len();
        ::core::mem::forget(vec5);
        *ptr2.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>() = len5;
        *ptr2.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr5.cast_mut();
      },
      None => {
        {
          *ptr2.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (0i32) as u8;
        }
      },
    };*ptr2.add(8+6*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(timestamp3);
  } },
};ptr2
} }
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_get_memory_pressure<T: Guest>(arg0: *mut u8,) { unsafe {
  let l0 = i32::from(*arg0.add(0).cast::<u8>());
  match l0 {
    0 => (),
    _ => {
      let l1 = *arg0.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
      let l2 = *arg0.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>();
      _rt::cabi_dealloc(l1, l2, 1);
      let l3 = i32::from(*arg0.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>());
      match l3 {
        0 => (),
        _ => {
          let l4 = *arg0.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l5 = *arg0.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l4, l5, 1);
        },
      }
    },
  }
} }
#[doc(hidden)]
#[allow(non_snake_case, unused_unsafe)]
pub unsafe fn _export_validate_allocation_request_cabi<T: Guest>(arg0: *mut u8,arg1: usize,arg2: i64,arg3: *mut u8,arg4: usize,arg5: i32,) -> *mut u8 { unsafe {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result2 = {
  let len0 = arg1;
  let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
  let len1 = arg4;
  let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
  T::validate_allocation_request(_rt::string_lift(bytes0), super::super::super::super::exports::flight::memory::memory_types::MemorySize{
    bytes: arg2 as u64,
    human_readable: _rt::string_lift(bytes1),
  }, super::super::super::super::exports::flight::memory::memory_types::MemoryPurpose::_lift(arg5 as u8))
};
let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
match result2 {
  Ok(e) => { {
    *ptr3.add(0).cast::<u8>() = (0i32) as u8;
    *ptr3.add(8).cast::<u8>() = (match e { true => 1, false => 0 }) as u8;
  } },
  Err(e) => { {
    *ptr3.add(0).cast::<u8>() = (1i32) as u8;
    let super::super::super::super::exports::flight::memory::memory_types::MemoryError{ code:code4, message:message4, details:details4, timestamp:timestamp4, } = e;
    *ptr3.add(8).cast::<u8>() = (code4.clone() as i32) as u8;
    let vec5 = (message4.into_bytes()).into_boxed_slice();
    let ptr5 = vec5.as_ptr().cast::<u8>();
    let len5 = vec5.len();
    ::core::mem::forget(vec5);
    *ptr3.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>() = len5;
    *ptr3.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr5.cast_mut();
    match details4 {
      Some(e) => {
        *ptr3.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (1i32) as u8;
        let vec6 = (e.into_bytes()).into_boxed_slice();
        let ptr6 = vec6.as_ptr().cast::<u8>();
        let len6 = vec6.len();
        ::core::mem::forget(vec6);
        *ptr3.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>() = len6;
        *ptr3.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr6.cast_mut();
      },
      None => {
        {
          *ptr3.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (0i32) as u8;
        }
      },
    };*ptr3.add(8+6*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(timestamp4);
  } },
};ptr3
} }
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_validate_allocation_request<T: Guest>(arg0: *mut u8,) { unsafe {
  let l0 = i32::from(*arg0.add(0).cast::<u8>());
  match l0 {
    0 => (),
    _ => {
      let l1 = *arg0.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
      let l2 = *arg0.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>();
      _rt::cabi_dealloc(l1, l2, 1);
      let l3 = i32::from(*arg0.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>());
      match l3 {
        0 => (),
        _ => {
          let l4 = *arg0.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l5 = *arg0.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l4, l5, 1);
        },
      }
    },
  }
} }
#[doc(hidden)]
#[allow(non_snake_case, unused_unsafe)]
pub unsafe fn _export_list_allocations_cabi<T: Guest>(arg0: *mut u8,arg1: usize,) -> *mut u8 { unsafe {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result1 = {
  let len0 = arg1;
  let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
  T::list_allocations(_rt::string_lift(bytes0))
};
let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
match result1 {
  Ok(e) => { {
    *ptr2.add(0).cast::<u8>() = (0i32) as u8;
    let vec8 = e;
    let len8 = vec8.len();
    let layout8 = _rt::alloc::Layout::from_size_align(vec8.len() * (40+6*::core::mem::size_of::<*const u8>()), 8).unwrap();
    let (result8, _cleanup8) = wit_bindgen::rt::Cleanup::new(layout8);if let Some(cleanup) = _cleanup8 { cleanup.forget(); }
    for (i, e) in vec8.into_iter().enumerate() {
      let base = result8.add(i * (40+6*::core::mem::size_of::<*const u8>()));
      {
        let super::super::super::super::exports::flight::memory::memory_types::MemoryAllocation{ id:id3, session_id:session_id3, size:size3, purpose:purpose3, allocated_at:allocated_at3, freed_at:freed_at3, } = e;
        let vec4 = (id3.into_bytes()).into_boxed_slice();
        let ptr4 = vec4.as_ptr().cast::<u8>();
        let len4 = vec4.len();
        ::core::mem::forget(vec4);
        *base.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len4;
        *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
        let vec5 = (session_id3.into_bytes()).into_boxed_slice();
        let ptr5 = vec5.as_ptr().cast::<u8>();
        let len5 = vec5.len();
        ::core::mem::forget(vec5);
        *base.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>() = len5;
        *base.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr5.cast_mut();
        let super::super::super::super::exports::flight::memory::memory_types::MemorySize{ bytes:bytes6, human_readable:human_readable6, } = size3;
        *base.add(4*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(bytes6);
        let vec7 = (human_readable6.into_bytes()).into_boxed_slice();
        let ptr7 = vec7.as_ptr().cast::<u8>();
        let len7 = vec7.len();
        ::core::mem::forget(vec7);
        *base.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>() = len7;
        *base.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr7.cast_mut();
        *base.add(8+6*::core::mem::size_of::<*const u8>()).cast::<u8>() = (purpose3.clone() as i32) as u8;
        *base.add(16+6*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(allocated_at3);
        match freed_at3 {
          Some(e) => {
            *base.add(24+6*::core::mem::size_of::<*const u8>()).cast::<u8>() = (1i32) as u8;
            *base.add(32+6*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(e);
          },
          None => {
            {
              *base.add(24+6*::core::mem::size_of::<*const u8>()).cast::<u8>() = (0i32) as u8;
            }
          },
        };}
      }
      *ptr2.add(8+1*::core::mem::size_of::<*const u8>()).cast::<usize>() = len8;
      *ptr2.add(8).cast::<*mut u8>() = result8;
    } },
    Err(e) => { {
      *ptr2.add(0).cast::<u8>() = (1i32) as u8;
      let super::super::super::super::exports::flight::memory::memory_types::MemoryError{ code:code9, message:message9, details:details9, timestamp:timestamp9, } = e;
      *ptr2.add(8).cast::<u8>() = (code9.clone() as i32) as u8;
      let vec10 = (message9.into_bytes()).into_boxed_slice();
      let ptr10 = vec10.as_ptr().cast::<u8>();
      let len10 = vec10.len();
      ::core::mem::forget(vec10);
      *ptr2.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>() = len10;
      *ptr2.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr10.cast_mut();
      match details9 {
        Some(e) => {
          *ptr2.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (1i32) as u8;
          let vec11 = (e.into_bytes()).into_boxed_slice();
          let ptr11 = vec11.as_ptr().cast::<u8>();
          let len11 = vec11.len();
          ::core::mem::forget(vec11);
          *ptr2.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>() = len11;
          *ptr2.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr11.cast_mut();
        },
        None => {
          {
            *ptr2.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (0i32) as u8;
          }
        },
      };*ptr2.add(8+6*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(timestamp9);
    } },
  };ptr2
} }
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_list_allocations<T: Guest>(arg0: *mut u8,) { unsafe {
  let l0 = i32::from(*arg0.add(0).cast::<u8>());
  match l0 {
    0 => {
      let l1 = *arg0.add(8).cast::<*mut u8>();
      let l2 = *arg0.add(8+1*::core::mem::size_of::<*const u8>()).cast::<usize>();
      let base9 = l1;
      let len9 = l2;
      for i in 0..len9 {
        let base = base9.add(i * (40+6*::core::mem::size_of::<*const u8>()));
        {
          let l3 = *base.add(0).cast::<*mut u8>();
          let l4 = *base.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l3, l4, 1);
          let l5 = *base.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l6 = *base.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l5, l6, 1);
          let l7 = *base.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l8 = *base.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l7, l8, 1);
        }
      }
      _rt::cabi_dealloc(base9, len9 * (40+6*::core::mem::size_of::<*const u8>()), 8);
    },
    _ => {
      let l10 = *arg0.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
      let l11 = *arg0.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>();
      _rt::cabi_dealloc(l10, l11, 1);
      let l12 = i32::from(*arg0.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>());
      match l12 {
        0 => (),
        _ => {
          let l13 = *arg0.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l14 = *arg0.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l13, l14, 1);
        },
      }
    },
  }
} }
pub trait Guest {
  /// Create a new memory allocation record
  ///
  /// V6R calls this when allocating VM memory
  /// Flight-Core calls this for component memory tracking
  #[allow(async_fn_in_trait)]
  fn create_allocation(session_id: _rt::String,size: MemorySize,purpose: MemoryPurpose,) -> Result<MemoryAllocation,MemoryError>;
  /// Free a memory allocation
  ///
  /// Marks allocation as freed and updates tracking
  #[allow(async_fn_in_trait)]
  fn free_allocation(allocation_id: _rt::String,) -> Result<bool,MemoryError>;
  /// Get current memory usage snapshot
  ///
  /// V6R uses for real-time UI updates and WebSocket streaming
  /// Flight-Core uses for platform memory monitoring
  #[allow(async_fn_in_trait)]
  fn get_memory_snapshot(session_id: _rt::String,) -> Result<MemoryUsageSnapshot,MemoryError>;
  /// Get platform memory profile
  ///
  /// Returns memory constraints and capabilities for platform
  #[allow(async_fn_in_trait)]
  fn get_platform_profile(platform: _rt::String,) -> Result<PlatformProfile,MemoryError>;
  /// Set memory limits for session
  ///
  /// V6R uses for VM resource enforcement
  /// Flight-Core uses for component constraint setting
  #[allow(async_fn_in_trait)]
  fn set_memory_limits(session_id: _rt::String,limits: MemoryLimits,) -> Result<bool,MemoryError>;
  /// Get memory limits for session
  #[allow(async_fn_in_trait)]
  fn get_memory_limits(session_id: _rt::String,) -> Result<MemoryLimits,MemoryError>;
  /// Check current memory pressure level
  ///
  /// Enables adaptive behavior based on memory availability
  #[allow(async_fn_in_trait)]
  fn get_memory_pressure(session_id: _rt::String,) -> Result<MemoryPressure,MemoryError>;
  /// Validate memory allocation request
  ///
  /// Checks if allocation would succeed without actually allocating
  /// Critical for V6R VM sizing decisions
  #[allow(async_fn_in_trait)]
  fn validate_allocation_request(session_id: _rt::String,size: MemorySize,purpose: MemoryPurpose,) -> Result<bool,MemoryError>;
  /// List all active allocations for session
  ///
  /// V6R uses for memory usage breakdowns
  /// Flight-Core uses for debugging and monitoring
  #[allow(async_fn_in_trait)]
  fn list_allocations(session_id: _rt::String,) -> Result<_rt::Vec::<MemoryAllocation>,MemoryError>;
}
#[doc(hidden)]

macro_rules! __export_flight_memory_memory_operations_1_0_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[unsafe(export_name = "flight:memory/memory-operations@1.0.0#create-allocation")]
    unsafe extern "C" fn export_create_allocation(arg0: *mut u8,arg1: usize,arg2: i64,arg3: *mut u8,arg4: usize,arg5: i32,) -> *mut u8 {
      unsafe { $($path_to_types)*::_export_create_allocation_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5) }
    }
    #[unsafe(export_name = "cabi_post_flight:memory/memory-operations@1.0.0#create-allocation")]
    unsafe extern "C" fn _post_return_create_allocation(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_create_allocation::<$ty>(arg0) }
    }
    #[unsafe(export_name = "flight:memory/memory-operations@1.0.0#free-allocation")]
    unsafe extern "C" fn export_free_allocation(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      unsafe { $($path_to_types)*::_export_free_allocation_cabi::<$ty>(arg0, arg1) }
    }
    #[unsafe(export_name = "cabi_post_flight:memory/memory-operations@1.0.0#free-allocation")]
    unsafe extern "C" fn _post_return_free_allocation(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_free_allocation::<$ty>(arg0) }
    }
    #[unsafe(export_name = "flight:memory/memory-operations@1.0.0#get-memory-snapshot")]
    unsafe extern "C" fn export_get_memory_snapshot(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      unsafe { $($path_to_types)*::_export_get_memory_snapshot_cabi::<$ty>(arg0, arg1) }
    }
    #[unsafe(export_name = "cabi_post_flight:memory/memory-operations@1.0.0#get-memory-snapshot")]
    unsafe extern "C" fn _post_return_get_memory_snapshot(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_get_memory_snapshot::<$ty>(arg0) }
    }
    #[unsafe(export_name = "flight:memory/memory-operations@1.0.0#get-platform-profile")]
    unsafe extern "C" fn export_get_platform_profile(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      unsafe { $($path_to_types)*::_export_get_platform_profile_cabi::<$ty>(arg0, arg1) }
    }
    #[unsafe(export_name = "cabi_post_flight:memory/memory-operations@1.0.0#get-platform-profile")]
    unsafe extern "C" fn _post_return_get_platform_profile(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_get_platform_profile::<$ty>(arg0) }
    }
    #[unsafe(export_name = "flight:memory/memory-operations@1.0.0#set-memory-limits")]
    unsafe extern "C" fn export_set_memory_limits(arg0: *mut u8,) -> *mut u8 {
      unsafe { $($path_to_types)*::_export_set_memory_limits_cabi::<$ty>(arg0) }
    }
    #[unsafe(export_name = "cabi_post_flight:memory/memory-operations@1.0.0#set-memory-limits")]
    unsafe extern "C" fn _post_return_set_memory_limits(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_set_memory_limits::<$ty>(arg0) }
    }
    #[unsafe(export_name = "flight:memory/memory-operations@1.0.0#get-memory-limits")]
    unsafe extern "C" fn export_get_memory_limits(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      unsafe { $($path_to_types)*::_export_get_memory_limits_cabi::<$ty>(arg0, arg1) }
    }
    #[unsafe(export_name = "cabi_post_flight:memory/memory-operations@1.0.0#get-memory-limits")]
    unsafe extern "C" fn _post_return_get_memory_limits(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_get_memory_limits::<$ty>(arg0) }
    }
    #[unsafe(export_name = "flight:memory/memory-operations@1.0.0#get-memory-pressure")]
    unsafe extern "C" fn export_get_memory_pressure(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      unsafe { $($path_to_types)*::_export_get_memory_pressure_cabi::<$ty>(arg0, arg1) }
    }
    #[unsafe(export_name = "cabi_post_flight:memory/memory-operations@1.0.0#get-memory-pressure")]
    unsafe extern "C" fn _post_return_get_memory_pressure(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_get_memory_pressure::<$ty>(arg0) }
    }
    #[unsafe(export_name = "flight:memory/memory-operations@1.0.0#validate-allocation-request")]
    unsafe extern "C" fn export_validate_allocation_request(arg0: *mut u8,arg1: usize,arg2: i64,arg3: *mut u8,arg4: usize,arg5: i32,) -> *mut u8 {
      unsafe { $($path_to_types)*::_export_validate_allocation_request_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5) }
    }
    #[unsafe(export_name = "cabi_post_flight:memory/memory-operations@1.0.0#validate-allocation-request")]
    unsafe extern "C" fn _post_return_validate_allocation_request(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_validate_allocation_request::<$ty>(arg0) }
    }
    #[unsafe(export_name = "flight:memory/memory-operations@1.0.0#list-allocations")]
    unsafe extern "C" fn export_list_allocations(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      unsafe { $($path_to_types)*::_export_list_allocations_cabi::<$ty>(arg0, arg1) }
    }
    #[unsafe(export_name = "cabi_post_flight:memory/memory-operations@1.0.0#list-allocations")]
    unsafe extern "C" fn _post_return_list_allocations(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_list_allocations::<$ty>(arg0) }
    }
  };);
}
#[doc(hidden)]
pub(crate) use __export_flight_memory_memory_operations_1_0_0_cabi;

#[repr(align(8))]
struct _RetArea([::core::mem::MaybeUninit::<u8>; 48+10*::core::mem::size_of::<*const u8>()]);
static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 48+10*::core::mem::size_of::<*const u8>()]);

}

/// Memory statistics and analytics
#[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
pub mod memory_analytics {
  #[used]
  #[doc(hidden)]
  static __FORCE_SECTION_REF: fn() =
  super::super::super::super::__link_custom_section_describing_imports;
  
  use super::super::super::super::_rt;
  pub type MemorySize = super::super::super::super::exports::flight::memory::memory_types::MemorySize;
  pub type MemoryPurpose = super::super::super::super::exports::flight::memory::memory_types::MemoryPurpose;
  pub type MemoryUsageSnapshot = super::super::super::super::exports::flight::memory::memory_types::MemoryUsageSnapshot;
  pub type MemoryError = super::super::super::super::exports::flight::memory::memory_types::MemoryError;
  /// Comprehensive memory statistics
  #[derive(Clone)]
  pub struct MemoryStats {
    /// Total allocations made
    pub total_allocations: u64,
    /// Active allocations count
    pub active_allocations: u64,
    /// Peak memory usage recorded
    pub peak_memory: MemorySize,
    /// Current memory usage
    pub current_memory: MemorySize,
    /// Average allocation size
    pub average_allocation_size: MemorySize,
    /// Memory usage by purpose
    pub usage_by_purpose: _rt::Vec::<(MemoryPurpose,MemorySize,)>,
    /// Memory efficiency ratio (0.0-1.0)
    pub efficiency_ratio: f32,
  }
  impl ::core::fmt::Debug for MemoryStats {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
      f.debug_struct("MemoryStats").field("total-allocations", &self.total_allocations).field("active-allocations", &self.active_allocations).field("peak-memory", &self.peak_memory).field("current-memory", &self.current_memory).field("average-allocation-size", &self.average_allocation_size).field("usage-by-purpose", &self.usage_by_purpose).field("efficiency-ratio", &self.efficiency_ratio).finish()
    }
  }
  /// Trend direction enumeration
  #[repr(u8)]
  #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
  pub enum TrendDirection {
    Increasing,
    Decreasing,
    Stable,
    Volatile,
  }
  impl ::core::fmt::Debug for TrendDirection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
      match self {
        TrendDirection::Increasing => {
          f.debug_tuple("TrendDirection::Increasing").finish()
        }
        TrendDirection::Decreasing => {
          f.debug_tuple("TrendDirection::Decreasing").finish()
        }
        TrendDirection::Stable => {
          f.debug_tuple("TrendDirection::Stable").finish()
        }
        TrendDirection::Volatile => {
          f.debug_tuple("TrendDirection::Volatile").finish()
        }
      }
    }
  }

  impl TrendDirection{
    #[doc(hidden)]
    pub unsafe fn _lift(val: u8) -> TrendDirection{
      if !cfg!(debug_assertions) {
        return unsafe { ::core::mem::transmute(val) };
      }

      match val {
        0 => TrendDirection::Increasing,
        1 => TrendDirection::Decreasing,
        2 => TrendDirection::Stable,
        3 => TrendDirection::Volatile,

        _ => panic!("invalid enum discriminant"),
      }
    }
  }

  /// Memory usage trend data
  #[derive(Clone)]
  pub struct MemoryTrend {
    /// Data points over time
    pub snapshots: _rt::Vec::<MemoryUsageSnapshot>,
    /// Trend direction (increasing/decreasing/stable)
    pub trend_direction: TrendDirection,
    /// Predicted future usage
    pub predicted_peak: Option<MemorySize>,
  }
  impl ::core::fmt::Debug for MemoryTrend {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
      f.debug_struct("MemoryTrend").field("snapshots", &self.snapshots).field("trend-direction", &self.trend_direction).field("predicted-peak", &self.predicted_peak).finish()
    }
  }
  #[doc(hidden)]
  #[allow(non_snake_case, unused_unsafe)]
  pub unsafe fn _export_calculate_memory_stats_cabi<T: Guest>(arg0: *mut u8,arg1: usize,) -> *mut u8 { unsafe {#[cfg(target_arch="wasm32")]
  _rt::run_ctors_once();let result1 = {
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::calculate_memory_stats(_rt::string_lift(bytes0))
  };
  let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
  match result1 {
    Ok(e) => { {
      *ptr2.add(0).cast::<u8>() = (0i32) as u8;
      let MemoryStats{ total_allocations:total_allocations3, active_allocations:active_allocations3, peak_memory:peak_memory3, current_memory:current_memory3, average_allocation_size:average_allocation_size3, usage_by_purpose:usage_by_purpose3, efficiency_ratio:efficiency_ratio3, } = e;
      *ptr2.add(8).cast::<i64>() = _rt::as_i64(total_allocations3);
      *ptr2.add(16).cast::<i64>() = _rt::as_i64(active_allocations3);
      let super::super::super::super::exports::flight::memory::memory_types::MemorySize{ bytes:bytes4, human_readable:human_readable4, } = peak_memory3;
      *ptr2.add(24).cast::<i64>() = _rt::as_i64(bytes4);
      let vec5 = (human_readable4.into_bytes()).into_boxed_slice();
      let ptr5 = vec5.as_ptr().cast::<u8>();
      let len5 = vec5.len();
      ::core::mem::forget(vec5);
      *ptr2.add(32+1*::core::mem::size_of::<*const u8>()).cast::<usize>() = len5;
      *ptr2.add(32).cast::<*mut u8>() = ptr5.cast_mut();
      let super::super::super::super::exports::flight::memory::memory_types::MemorySize{ bytes:bytes6, human_readable:human_readable6, } = current_memory3;
      *ptr2.add(32+2*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(bytes6);
      let vec7 = (human_readable6.into_bytes()).into_boxed_slice();
      let ptr7 = vec7.as_ptr().cast::<u8>();
      let len7 = vec7.len();
      ::core::mem::forget(vec7);
      *ptr2.add(40+3*::core::mem::size_of::<*const u8>()).cast::<usize>() = len7;
      *ptr2.add(40+2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr7.cast_mut();
      let super::super::super::super::exports::flight::memory::memory_types::MemorySize{ bytes:bytes8, human_readable:human_readable8, } = average_allocation_size3;
      *ptr2.add(40+4*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(bytes8);
      let vec9 = (human_readable8.into_bytes()).into_boxed_slice();
      let ptr9 = vec9.as_ptr().cast::<u8>();
      let len9 = vec9.len();
      ::core::mem::forget(vec9);
      *ptr2.add(48+5*::core::mem::size_of::<*const u8>()).cast::<usize>() = len9;
      *ptr2.add(48+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr9.cast_mut();
      let vec13 = usage_by_purpose3;
      let len13 = vec13.len();
      let layout13 = _rt::alloc::Layout::from_size_align(vec13.len() * (16+2*::core::mem::size_of::<*const u8>()), 8).unwrap();
      let (result13, _cleanup13) = wit_bindgen::rt::Cleanup::new(layout13);if let Some(cleanup) = _cleanup13 { cleanup.forget(); }
      for (i, e) in vec13.into_iter().enumerate() {
        let base = result13.add(i * (16+2*::core::mem::size_of::<*const u8>()));
        {
          let (t10_0, t10_1, ) = e;
          *base.add(0).cast::<u8>() = (t10_0.clone() as i32) as u8;
          let super::super::super::super::exports::flight::memory::memory_types::MemorySize{ bytes:bytes11, human_readable:human_readable11, } = t10_1;
          *base.add(8).cast::<i64>() = _rt::as_i64(bytes11);
          let vec12 = (human_readable11.into_bytes()).into_boxed_slice();
          let ptr12 = vec12.as_ptr().cast::<u8>();
          let len12 = vec12.len();
          ::core::mem::forget(vec12);
          *base.add(16+1*::core::mem::size_of::<*const u8>()).cast::<usize>() = len12;
          *base.add(16).cast::<*mut u8>() = ptr12.cast_mut();
        }
      }
      *ptr2.add(48+7*::core::mem::size_of::<*const u8>()).cast::<usize>() = len13;
      *ptr2.add(48+6*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = result13;
      *ptr2.add(48+8*::core::mem::size_of::<*const u8>()).cast::<f32>() = _rt::as_f32(efficiency_ratio3);
    } },
    Err(e) => { {
      *ptr2.add(0).cast::<u8>() = (1i32) as u8;
      let super::super::super::super::exports::flight::memory::memory_types::MemoryError{ code:code14, message:message14, details:details14, timestamp:timestamp14, } = e;
      *ptr2.add(8).cast::<u8>() = (code14.clone() as i32) as u8;
      let vec15 = (message14.into_bytes()).into_boxed_slice();
      let ptr15 = vec15.as_ptr().cast::<u8>();
      let len15 = vec15.len();
      ::core::mem::forget(vec15);
      *ptr2.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>() = len15;
      *ptr2.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr15.cast_mut();
      match details14 {
        Some(e) => {
          *ptr2.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (1i32) as u8;
          let vec16 = (e.into_bytes()).into_boxed_slice();
          let ptr16 = vec16.as_ptr().cast::<u8>();
          let len16 = vec16.len();
          ::core::mem::forget(vec16);
          *ptr2.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>() = len16;
          *ptr2.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr16.cast_mut();
        },
        None => {
          {
            *ptr2.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (0i32) as u8;
          }
        },
      };*ptr2.add(8+6*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(timestamp14);
    } },
  };ptr2
} }
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_calculate_memory_stats<T: Guest>(arg0: *mut u8,) { unsafe {
  let l0 = i32::from(*arg0.add(0).cast::<u8>());
  match l0 {
    0 => {
      let l1 = *arg0.add(32).cast::<*mut u8>();
      let l2 = *arg0.add(32+1*::core::mem::size_of::<*const u8>()).cast::<usize>();
      _rt::cabi_dealloc(l1, l2, 1);
      let l3 = *arg0.add(40+2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
      let l4 = *arg0.add(40+3*::core::mem::size_of::<*const u8>()).cast::<usize>();
      _rt::cabi_dealloc(l3, l4, 1);
      let l5 = *arg0.add(48+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
      let l6 = *arg0.add(48+5*::core::mem::size_of::<*const u8>()).cast::<usize>();
      _rt::cabi_dealloc(l5, l6, 1);
      let l7 = *arg0.add(48+6*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
      let l8 = *arg0.add(48+7*::core::mem::size_of::<*const u8>()).cast::<usize>();
      let base11 = l7;
      let len11 = l8;
      for i in 0..len11 {
        let base = base11.add(i * (16+2*::core::mem::size_of::<*const u8>()));
        {
          let l9 = *base.add(16).cast::<*mut u8>();
          let l10 = *base.add(16+1*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l9, l10, 1);
        }
      }
      _rt::cabi_dealloc(base11, len11 * (16+2*::core::mem::size_of::<*const u8>()), 8);
    },
    _ => {
      let l12 = *arg0.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
      let l13 = *arg0.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>();
      _rt::cabi_dealloc(l12, l13, 1);
      let l14 = i32::from(*arg0.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>());
      match l14 {
        0 => (),
        _ => {
          let l15 = *arg0.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l16 = *arg0.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l15, l16, 1);
        },
      }
    },
  }
} }
#[doc(hidden)]
#[allow(non_snake_case, unused_unsafe)]
pub unsafe fn _export_get_memory_trends_cabi<T: Guest>(arg0: *mut u8,arg1: usize,arg2: i64,) -> *mut u8 { unsafe {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result1 = {
  let len0 = arg1;
  let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
  T::get_memory_trends(_rt::string_lift(bytes0), arg2 as u64)
};
let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
match result1 {
  Ok(e) => { {
    *ptr2.add(0).cast::<u8>() = (0i32) as u8;
    let MemoryTrend{ snapshots:snapshots3, trend_direction:trend_direction3, predicted_peak:predicted_peak3, } = e;
    let vec13 = snapshots3;
    let len13 = vec13.len();
    let layout13 = _rt::alloc::Layout::from_size_align(vec13.len() * (40+10*::core::mem::size_of::<*const u8>()), 8).unwrap();
    let (result13, _cleanup13) = wit_bindgen::rt::Cleanup::new(layout13);if let Some(cleanup) = _cleanup13 { cleanup.forget(); }
    for (i, e) in vec13.into_iter().enumerate() {
      let base = result13.add(i * (40+10*::core::mem::size_of::<*const u8>()));
      {
        let super::super::super::super::exports::flight::memory::memory_types::MemoryUsageSnapshot{ timestamp:timestamp4, session_id:session_id4, platform:platform4, total:total4, used:used4, available:available4, fragmentation_ratio:fragmentation_ratio4, } = e;
        *base.add(0).cast::<i64>() = _rt::as_i64(timestamp4);
        let vec5 = (session_id4.into_bytes()).into_boxed_slice();
        let ptr5 = vec5.as_ptr().cast::<u8>();
        let len5 = vec5.len();
        ::core::mem::forget(vec5);
        *base.add(8+1*::core::mem::size_of::<*const u8>()).cast::<usize>() = len5;
        *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
        let vec6 = (platform4.into_bytes()).into_boxed_slice();
        let ptr6 = vec6.as_ptr().cast::<u8>();
        let len6 = vec6.len();
        ::core::mem::forget(vec6);
        *base.add(8+3*::core::mem::size_of::<*const u8>()).cast::<usize>() = len6;
        *base.add(8+2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr6.cast_mut();
        let super::super::super::super::exports::flight::memory::memory_types::MemorySize{ bytes:bytes7, human_readable:human_readable7, } = total4;
        *base.add(8+4*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(bytes7);
        let vec8 = (human_readable7.into_bytes()).into_boxed_slice();
        let ptr8 = vec8.as_ptr().cast::<u8>();
        let len8 = vec8.len();
        ::core::mem::forget(vec8);
        *base.add(16+5*::core::mem::size_of::<*const u8>()).cast::<usize>() = len8;
        *base.add(16+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr8.cast_mut();
        let super::super::super::super::exports::flight::memory::memory_types::MemorySize{ bytes:bytes9, human_readable:human_readable9, } = used4;
        *base.add(16+6*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(bytes9);
        let vec10 = (human_readable9.into_bytes()).into_boxed_slice();
        let ptr10 = vec10.as_ptr().cast::<u8>();
        let len10 = vec10.len();
        ::core::mem::forget(vec10);
        *base.add(24+7*::core::mem::size_of::<*const u8>()).cast::<usize>() = len10;
        *base.add(24+6*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr10.cast_mut();
        let super::super::super::super::exports::flight::memory::memory_types::MemorySize{ bytes:bytes11, human_readable:human_readable11, } = available4;
        *base.add(24+8*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(bytes11);
        let vec12 = (human_readable11.into_bytes()).into_boxed_slice();
        let ptr12 = vec12.as_ptr().cast::<u8>();
        let len12 = vec12.len();
        ::core::mem::forget(vec12);
        *base.add(32+9*::core::mem::size_of::<*const u8>()).cast::<usize>() = len12;
        *base.add(32+8*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr12.cast_mut();
        *base.add(32+10*::core::mem::size_of::<*const u8>()).cast::<f32>() = _rt::as_f32(fragmentation_ratio4);
      }
    }
    *ptr2.add(8+1*::core::mem::size_of::<*const u8>()).cast::<usize>() = len13;
    *ptr2.add(8).cast::<*mut u8>() = result13;
    *ptr2.add(8+2*::core::mem::size_of::<*const u8>()).cast::<u8>() = (trend_direction3.clone() as i32) as u8;
    match predicted_peak3 {
      Some(e) => {
        *ptr2.add(16+2*::core::mem::size_of::<*const u8>()).cast::<u8>() = (1i32) as u8;
        let super::super::super::super::exports::flight::memory::memory_types::MemorySize{ bytes:bytes14, human_readable:human_readable14, } = e;
        *ptr2.add(24+2*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(bytes14);
        let vec15 = (human_readable14.into_bytes()).into_boxed_slice();
        let ptr15 = vec15.as_ptr().cast::<u8>();
        let len15 = vec15.len();
        ::core::mem::forget(vec15);
        *ptr2.add(32+3*::core::mem::size_of::<*const u8>()).cast::<usize>() = len15;
        *ptr2.add(32+2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr15.cast_mut();
      },
      None => {
        {
          *ptr2.add(16+2*::core::mem::size_of::<*const u8>()).cast::<u8>() = (0i32) as u8;
        }
      },
    };} },
    Err(e) => { {
      *ptr2.add(0).cast::<u8>() = (1i32) as u8;
      let super::super::super::super::exports::flight::memory::memory_types::MemoryError{ code:code16, message:message16, details:details16, timestamp:timestamp16, } = e;
      *ptr2.add(8).cast::<u8>() = (code16.clone() as i32) as u8;
      let vec17 = (message16.into_bytes()).into_boxed_slice();
      let ptr17 = vec17.as_ptr().cast::<u8>();
      let len17 = vec17.len();
      ::core::mem::forget(vec17);
      *ptr2.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>() = len17;
      *ptr2.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr17.cast_mut();
      match details16 {
        Some(e) => {
          *ptr2.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (1i32) as u8;
          let vec18 = (e.into_bytes()).into_boxed_slice();
          let ptr18 = vec18.as_ptr().cast::<u8>();
          let len18 = vec18.len();
          ::core::mem::forget(vec18);
          *ptr2.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>() = len18;
          *ptr2.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr18.cast_mut();
        },
        None => {
          {
            *ptr2.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (0i32) as u8;
          }
        },
      };*ptr2.add(8+6*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(timestamp16);
    } },
  };ptr2
} }
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_get_memory_trends<T: Guest>(arg0: *mut u8,) { unsafe {
  let l0 = i32::from(*arg0.add(0).cast::<u8>());
  match l0 {
    0 => {
      let l1 = *arg0.add(8).cast::<*mut u8>();
      let l2 = *arg0.add(8+1*::core::mem::size_of::<*const u8>()).cast::<usize>();
      let base13 = l1;
      let len13 = l2;
      for i in 0..len13 {
        let base = base13.add(i * (40+10*::core::mem::size_of::<*const u8>()));
        {
          let l3 = *base.add(8).cast::<*mut u8>();
          let l4 = *base.add(8+1*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l3, l4, 1);
          let l5 = *base.add(8+2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l6 = *base.add(8+3*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l5, l6, 1);
          let l7 = *base.add(16+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l8 = *base.add(16+5*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l7, l8, 1);
          let l9 = *base.add(24+6*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l10 = *base.add(24+7*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l9, l10, 1);
          let l11 = *base.add(32+8*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l12 = *base.add(32+9*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l11, l12, 1);
        }
      }
      _rt::cabi_dealloc(base13, len13 * (40+10*::core::mem::size_of::<*const u8>()), 8);
      let l14 = i32::from(*arg0.add(16+2*::core::mem::size_of::<*const u8>()).cast::<u8>());
      match l14 {
        0 => (),
        _ => {
          let l15 = *arg0.add(32+2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l16 = *arg0.add(32+3*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l15, l16, 1);
        },
      }
    },
    _ => {
      let l17 = *arg0.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
      let l18 = *arg0.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>();
      _rt::cabi_dealloc(l17, l18, 1);
      let l19 = i32::from(*arg0.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>());
      match l19 {
        0 => (),
        _ => {
          let l20 = *arg0.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l21 = *arg0.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l20, l21, 1);
        },
      }
    },
  }
} }
#[doc(hidden)]
#[allow(non_snake_case, unused_unsafe)]
pub unsafe fn _export_generate_memory_report_cabi<T: Guest>(arg0: *mut u8,arg1: usize,) -> *mut u8 { unsafe {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result1 = {
  let len0 = arg1;
  let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
  T::generate_memory_report(_rt::string_lift(bytes0))
};
let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
match result1 {
  Ok(e) => { {
    *ptr2.add(0).cast::<u8>() = (0i32) as u8;
    let vec3 = (e.into_bytes()).into_boxed_slice();
    let ptr3 = vec3.as_ptr().cast::<u8>();
    let len3 = vec3.len();
    ::core::mem::forget(vec3);
    *ptr2.add(8+1*::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
    *ptr2.add(8).cast::<*mut u8>() = ptr3.cast_mut();
  } },
  Err(e) => { {
    *ptr2.add(0).cast::<u8>() = (1i32) as u8;
    let super::super::super::super::exports::flight::memory::memory_types::MemoryError{ code:code4, message:message4, details:details4, timestamp:timestamp4, } = e;
    *ptr2.add(8).cast::<u8>() = (code4.clone() as i32) as u8;
    let vec5 = (message4.into_bytes()).into_boxed_slice();
    let ptr5 = vec5.as_ptr().cast::<u8>();
    let len5 = vec5.len();
    ::core::mem::forget(vec5);
    *ptr2.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>() = len5;
    *ptr2.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr5.cast_mut();
    match details4 {
      Some(e) => {
        *ptr2.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (1i32) as u8;
        let vec6 = (e.into_bytes()).into_boxed_slice();
        let ptr6 = vec6.as_ptr().cast::<u8>();
        let len6 = vec6.len();
        ::core::mem::forget(vec6);
        *ptr2.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>() = len6;
        *ptr2.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr6.cast_mut();
      },
      None => {
        {
          *ptr2.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>() = (0i32) as u8;
        }
      },
    };*ptr2.add(8+6*::core::mem::size_of::<*const u8>()).cast::<i64>() = _rt::as_i64(timestamp4);
  } },
};ptr2
} }
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_generate_memory_report<T: Guest>(arg0: *mut u8,) { unsafe {
  let l0 = i32::from(*arg0.add(0).cast::<u8>());
  match l0 {
    0 => {
      let l1 = *arg0.add(8).cast::<*mut u8>();
      let l2 = *arg0.add(8+1*::core::mem::size_of::<*const u8>()).cast::<usize>();
      _rt::cabi_dealloc(l1, l2, 1);
    },
    _ => {
      let l3 = *arg0.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
      let l4 = *arg0.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>();
      _rt::cabi_dealloc(l3, l4, 1);
      let l5 = i32::from(*arg0.add(8+3*::core::mem::size_of::<*const u8>()).cast::<u8>());
      match l5 {
        0 => (),
        _ => {
          let l6 = *arg0.add(8+4*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l7 = *arg0.add(8+5*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l6, l7, 1);
        },
      }
    },
  }
} }
pub trait Guest {
  /// Calculate memory statistics
  ///
  /// Provides detailed memory usage analytics
  #[allow(async_fn_in_trait)]
  fn calculate_memory_stats(session_id: _rt::String,) -> Result<MemoryStats,MemoryError>;
  /// Get memory usage trends over time
  ///
  /// V6R uses for capacity planning and scaling decisions
  #[allow(async_fn_in_trait)]
  fn get_memory_trends(session_id: _rt::String,time_window: u64,) -> Result<MemoryTrend,MemoryError>;
  /// Generate memory usage report
  ///
  /// Comprehensive report for analysis and debugging
  #[allow(async_fn_in_trait)]
  fn generate_memory_report(session_id: _rt::String,) -> Result<_rt::String,MemoryError>;
}
#[doc(hidden)]

macro_rules! __export_flight_memory_memory_analytics_1_0_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[unsafe(export_name = "flight:memory/memory-analytics@1.0.0#calculate-memory-stats")]
    unsafe extern "C" fn export_calculate_memory_stats(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      unsafe { $($path_to_types)*::_export_calculate_memory_stats_cabi::<$ty>(arg0, arg1) }
    }
    #[unsafe(export_name = "cabi_post_flight:memory/memory-analytics@1.0.0#calculate-memory-stats")]
    unsafe extern "C" fn _post_return_calculate_memory_stats(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_calculate_memory_stats::<$ty>(arg0) }
    }
    #[unsafe(export_name = "flight:memory/memory-analytics@1.0.0#get-memory-trends")]
    unsafe extern "C" fn export_get_memory_trends(arg0: *mut u8,arg1: usize,arg2: i64,) -> *mut u8 {
      unsafe { $($path_to_types)*::_export_get_memory_trends_cabi::<$ty>(arg0, arg1, arg2) }
    }
    #[unsafe(export_name = "cabi_post_flight:memory/memory-analytics@1.0.0#get-memory-trends")]
    unsafe extern "C" fn _post_return_get_memory_trends(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_get_memory_trends::<$ty>(arg0) }
    }
    #[unsafe(export_name = "flight:memory/memory-analytics@1.0.0#generate-memory-report")]
    unsafe extern "C" fn export_generate_memory_report(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      unsafe { $($path_to_types)*::_export_generate_memory_report_cabi::<$ty>(arg0, arg1) }
    }
    #[unsafe(export_name = "cabi_post_flight:memory/memory-analytics@1.0.0#generate-memory-report")]
    unsafe extern "C" fn _post_return_generate_memory_report(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_generate_memory_report::<$ty>(arg0) }
    }
  };);
}
#[doc(hidden)]
pub(crate) use __export_flight_memory_memory_analytics_1_0_0_cabi;

#[repr(align(8))]
struct _RetArea([::core::mem::MaybeUninit::<u8>; 56+8*::core::mem::size_of::<*const u8>()]);
static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 56+8*::core::mem::size_of::<*const u8>()]);

}

}
}
}
mod _rt {
  #![allow(dead_code, clippy::all)]
  pub use alloc_crate::string::String;

  #[cfg(target_arch = "wasm32")]
  pub fn run_ctors_once() {
    wit_bindgen::rt::run_ctors_once();
  }
  pub use alloc_crate::vec::Vec;
  pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
    if cfg!(debug_assertions) {
      String::from_utf8(bytes).unwrap()
    } else {
      unsafe { String::from_utf8_unchecked(bytes) }
    }
  }
  
  pub fn as_i64<T: AsI64>(t: T) -> i64 {
    t.as_i64()
  }

  pub trait AsI64 {
    fn as_i64(self) -> i64;
  }

  impl<'a, T: Copy + AsI64> AsI64 for &'a T {
    fn as_i64(self) -> i64 {
      (*self).as_i64()
    }
  }
  
  impl AsI64 for i64 {
    #[inline]
    fn as_i64(self) -> i64 {
      self as i64
    }
  }
  
  impl AsI64 for u64 {
    #[inline]
    fn as_i64(self) -> i64 {
      self as i64
    }
  }
  pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
    if size == 0 {
      return;
    }
    unsafe {
      let layout = alloc::Layout::from_size_align_unchecked(size, align);
      alloc::dealloc(ptr, layout);
    }
  }
  
  pub fn as_f32<T: AsF32>(t: T) -> f32 {
    t.as_f32()
  }

  pub trait AsF32 {
    fn as_f32(self) -> f32;
  }

  impl<'a, T: Copy + AsF32> AsF32 for &'a T {
    fn as_f32(self) -> f32 {
      (*self).as_f32()
    }
  }
  
  impl AsF32 for f32 {
    #[inline]
    fn as_f32(self) -> f32 {
      self as f32
    }
  }
  pub use alloc_crate::alloc;
  extern crate alloc as alloc_crate;
}

/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_flight_memory_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::flight::memory::memory_types::__export_flight_memory_memory_types_1_0_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::flight::memory::memory_types);
  $($path_to_types_root)*::exports::flight::memory::memory_operations::__export_flight_memory_memory_operations_1_0_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::flight::memory::memory_operations);
  $($path_to_types_root)*::exports::flight::memory::memory_analytics::__export_flight_memory_memory_analytics_1_0_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::flight::memory::memory_analytics);
  )
}
#[doc(inline)]
pub(crate) use __export_flight_memory_impl as export;

#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.42.1:flight:memory@1.0.0:flight-memory:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 2489] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xb5\x12\x01A\x02\x01\
A\x0e\x01B\x14\x01r\x02\x05bytesw\x0ehuman-readables\x04\0\x0bmemory-size\x03\0\0\
\x01r\x07\x09timestampw\x0asession-ids\x08platforms\x05total\x01\x04used\x01\x09\
available\x01\x13fragmentation-ratiov\x04\0\x15memory-usage-snapshot\x03\0\x02\x01\
q\x07\x09dreamcast\x01\x01\0\x03psp\x01\x01\0\x04vita\x01\x01\0\x09v6r-small\x01\
\x01\0\x0av6r-medium\x01\x01\0\x09v6r-large\x01\x01\0\x06custom\x01\x01\0\x04\0\x10\
platform-profile\x03\0\x04\x01m\x08\x07vm-heap\x0fcomponent-stack\x0basset-cache\
\x0ejit-code-cache\x0fsystem-reserved\x0bwasm-linear\x0fnetwork-buffers\x09tempo\
rary\x04\0\x0ememory-purpose\x03\0\x06\x01kw\x01r\x06\x02ids\x0asession-ids\x04s\
ize\x01\x07purpose\x07\x0callocated-atw\x08freed-at\x08\x04\0\x11memory-allocati\
on\x03\0\x09\x01m\x04\x03low\x06medium\x04high\x08critical\x04\0\x0fmemory-press\
ure\x03\0\x0b\x01r\x05\x08heap-max\x01\x09stack-max\x01\x09cache-max\x01\x0asoft\
-limit\x01\x0ahard-limit\x01\x04\0\x0dmemory-limits\x03\0\x0d\x01m\x08\x13insuff\
icient-memory\x0elimit-exceeded\x0cinvalid-size\x11allocation-failed\x0dalready-\
freed\x12invalid-allocation\x14unsupported-platform\x13fragmentation-error\x04\0\
\x11memory-error-code\x03\0\x0f\x01ks\x01r\x04\x04code\x10\x07messages\x07detail\
s\x11\x09timestampw\x04\0\x0cmemory-error\x03\0\x12\x04\0\x20flight:memory/memor\
y-types@1.0.0\x05\0\x02\x03\0\0\x0bmemory-size\x02\x03\0\0\x11memory-allocation\x02\
\x03\0\0\x0ememory-purpose\x02\x03\0\0\x15memory-usage-snapshot\x02\x03\0\0\x0cm\
emory-error\x02\x03\0\0\x0dmemory-limits\x02\x03\0\0\x0fmemory-pressure\x02\x03\0\
\0\x10platform-profile\x01B*\x02\x03\x02\x01\x01\x04\0\x0bmemory-size\x03\0\0\x02\
\x03\x02\x01\x02\x04\0\x11memory-allocation\x03\0\x02\x02\x03\x02\x01\x03\x04\0\x0e\
memory-purpose\x03\0\x04\x02\x03\x02\x01\x04\x04\0\x15memory-usage-snapshot\x03\0\
\x06\x02\x03\x02\x01\x05\x04\0\x0cmemory-error\x03\0\x08\x02\x03\x02\x01\x06\x04\
\0\x0dmemory-limits\x03\0\x0a\x02\x03\x02\x01\x07\x04\0\x0fmemory-pressure\x03\0\
\x0c\x02\x03\x02\x01\x08\x04\0\x10platform-profile\x03\0\x0e\x01j\x01\x03\x01\x09\
\x01@\x03\x0asession-ids\x04size\x01\x07purpose\x05\0\x10\x04\0\x11create-alloca\
tion\x01\x11\x01j\x01\x7f\x01\x09\x01@\x01\x0dallocation-ids\0\x12\x04\0\x0ffree\
-allocation\x01\x13\x01j\x01\x07\x01\x09\x01@\x01\x0asession-ids\0\x14\x04\0\x13\
get-memory-snapshot\x01\x15\x01j\x01\x0f\x01\x09\x01@\x01\x08platforms\0\x16\x04\
\0\x14get-platform-profile\x01\x17\x01@\x02\x0asession-ids\x06limits\x0b\0\x12\x04\
\0\x11set-memory-limits\x01\x18\x01j\x01\x0b\x01\x09\x01@\x01\x0asession-ids\0\x19\
\x04\0\x11get-memory-limits\x01\x1a\x01j\x01\x0d\x01\x09\x01@\x01\x0asession-ids\
\0\x1b\x04\0\x13get-memory-pressure\x01\x1c\x01@\x03\x0asession-ids\x04size\x01\x07\
purpose\x05\0\x12\x04\0\x1bvalidate-allocation-request\x01\x1d\x01p\x03\x01j\x01\
\x1e\x01\x09\x01@\x01\x0asession-ids\0\x1f\x04\0\x10list-allocations\x01\x20\x04\
\0%flight:memory/memory-operations@1.0.0\x05\x09\x01B\x1b\x02\x03\x02\x01\x01\x04\
\0\x0bmemory-size\x03\0\0\x02\x03\x02\x01\x03\x04\0\x0ememory-purpose\x03\0\x02\x02\
\x03\x02\x01\x04\x04\0\x15memory-usage-snapshot\x03\0\x04\x02\x03\x02\x01\x05\x04\
\0\x0cmemory-error\x03\0\x06\x01o\x02\x03\x01\x01p\x08\x01r\x07\x11total-allocat\
ionsw\x12active-allocationsw\x0bpeak-memory\x01\x0ecurrent-memory\x01\x17average\
-allocation-size\x01\x10usage-by-purpose\x09\x10efficiency-ratiov\x04\0\x0cmemor\
y-stats\x03\0\x0a\x01m\x04\x0aincreasing\x0adecreasing\x06stable\x08volatile\x04\
\0\x0ftrend-direction\x03\0\x0c\x01p\x05\x01k\x01\x01r\x03\x09snapshots\x0e\x0ft\
rend-direction\x0d\x0epredicted-peak\x0f\x04\0\x0cmemory-trend\x03\0\x10\x01j\x01\
\x0b\x01\x07\x01@\x01\x0asession-ids\0\x12\x04\0\x16calculate-memory-stats\x01\x13\
\x01j\x01\x11\x01\x07\x01@\x02\x0asession-ids\x0btime-windoww\0\x14\x04\0\x11get\
-memory-trends\x01\x15\x01j\x01s\x01\x07\x01@\x01\x0asession-ids\0\x16\x04\0\x16\
generate-memory-report\x01\x17\x04\0$flight:memory/memory-analytics@1.0.0\x05\x0a\
\x04\0!flight:memory/flight-memory@1.0.0\x04\0\x0b\x13\x01\0\x0dflight-memory\x03\
\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.230.0\x10wit-\
bindgen-rust\x060.42.1";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
  wit_bindgen::rt::maybe_link_cabi_realloc();
}

