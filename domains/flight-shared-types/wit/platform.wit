package flight:platform@1.0.0;

/// Universal platform abstraction for Flight-Core multi-platform development
/// 
/// Enables consistent development across platforms from Dreamcast (16MB)
/// to V6R cloud environments (2GB+) with full type safety and performance
interface platform-types {
    use flight:memory/memory-types.{memory-size};
    use flight:error/error-types.{flight-result, flight-error};
    
    /// Platform capability levels for feature adaptation
    /// 
    /// Enables automatic feature scaling based on platform constraints
    enum platform-capability {
        /// Minimal capabilities (Dreamcast-class)
        minimal,
        /// Basic capabilities (PSP-class)
        basic,
        /// Standard capabilities (Vita-class)
        standard,
        /// Enhanced capabilities (V6R small)
        enhanced,
        /// Full capabilities (V6R medium+)
        full,
        /// Unlimited capabilities (V6R large+)
        unlimited,
    }
    
    /// Platform categories for development targeting
    /// 
    /// Groups platforms by development characteristics
    enum platform-category {
        /// Retro gaming platforms
        retro-gaming,
        /// Modern gaming platforms
        modern-gaming,
        /// Mobile platforms
        mobile,
        /// Desktop platforms
        desktop,
        /// Cloud/VM platforms
        cloud,
        /// Development platforms
        development,
        /// Testing platforms
        testing,
    }
    
    /// Comprehensive platform information
    /// 
    /// Complete platform description for adaptation and optimization
    record platform-info {
        /// Platform identifier
        id: string,
        /// Human-readable platform name
        name: string,
        /// Platform category
        category: platform-category,
        /// Capability level
        capability: platform-capability,
        /// Memory constraints
        memory: platform-memory-info,
        /// CPU characteristics
        cpu: platform-cpu-info,
        /// Graphics capabilities
        graphics: platform-graphics-info,
        /// Storage characteristics
        storage: platform-storage-info,
        /// Network capabilities
        network: platform-network-info,
        /// Supported features
        features: list<platform-feature>,
        /// Build configuration
        build-config: platform-build-config,
    }
    
    /// Platform memory characteristics
    /// 
    /// Memory constraints and capabilities for each platform
    record platform-memory-info {
        /// Total available memory
        total-memory: memory-size,
        /// Memory available for applications
        available-memory: memory-size,
        /// Memory reserved for system
        system-reserved: memory-size,
        /// Stack memory limit
        stack-limit: memory-size,
        /// Heap memory limit
        heap-limit: memory-size,
        /// Whether virtual memory is available
        has-virtual-memory: bool,
        /// Memory management unit present
        has-mmu: bool,
        /// DMA capabilities
        has-dma: bool,
    }
    
    /// Platform CPU characteristics
    /// 
    /// Processing capabilities for performance adaptation
    record platform-cpu-info {
        /// CPU architecture
        architecture: cpu-architecture,
        /// Core count
        core-count: u32,
        /// Approximate clock speed (MHz)
        clock-speed-mhz: u32,
        /// Instruction sets supported
        instruction-sets: list<instruction-set>,
        /// Cache sizes
        cache-info: cpu-cache-info,
        /// Floating point support
        has-fpu: bool,
        /// SIMD support
        has-simd: bool,
    }
    
    /// CPU architecture types
    enum cpu-architecture {
        /// SuperH (Dreamcast)
        sh4,
        /// MIPS (PSP)
        mips,
        /// ARM (modern mobile/embedded)
        arm,
        /// ARM64 (modern mobile/cloud)
        arm64,
        /// x86 (legacy desktop)
        x86,
        /// x86-64 (modern desktop/cloud)
        x86-64,
        /// WebAssembly (universal)
        wasm,
    }
    
    /// Instruction set support
    enum instruction-set {
        /// Basic instruction set
        base,
        /// SIMD extensions
        simd,
        /// Vector processing
        vector,
        /// Digital signal processing
        dsp,
        /// Cryptography extensions
        crypto,
    }
    
    /// CPU cache information
    record cpu-cache-info {
        /// L1 cache size
        l1-size: memory-size,
        /// L2 cache size
        l2-size: memory-size,
        /// L3 cache size (if available)
        l3-size: option<memory-size>,
    }
    
    /// Platform graphics capabilities
    /// 
    /// Graphics rendering capabilities for visual adaptation
    record platform-graphics-info {
        /// Graphics API support
        apis: list<graphics-api>,
        /// Maximum texture size
        max-texture-size: u32,
        /// Video memory
        video-memory: memory-size,
        /// Hardware acceleration
        has-hardware-accel: bool,
        /// Shader support
        shader-support: shader-support-level,
        /// Color depth
        color-depth: u32,
        /// Maximum resolution
        max-resolution: resolution,
    }
    
    /// Graphics API support
    enum graphics-api {
        /// Software rendering
        software,
        /// OpenGL ES (mobile/embedded)
        opengl-es,
        /// OpenGL (desktop)
        opengl,
        /// Vulkan (modern)
        vulkan,
        /// DirectX (Windows)
        directx,
        /// Metal (Apple platforms)
        metal,
        /// WebGL (web)
        webgl,
        /// Custom platform API
        custom,
    }
    
    /// Shader support levels
    enum shader-support-level {
        /// No shader support
        none,
        /// Basic vertex/fragment shaders
        basic,
        /// Advanced shading
        advanced,
        /// Compute shaders
        compute,
    }
    
    /// Display resolution
    record resolution {
        width: u32,
        height: u32,
    }
    
    /// Platform storage characteristics
    /// 
    /// Storage capabilities for asset management
    record platform-storage-info {
        /// Storage types available
        storage-types: list<storage-type>,
        /// Read speed (MB/s)
        read-speed-mbps: u32,
        /// Write speed (MB/s)
        write-speed-mbps: u32,
        /// Total storage capacity
        total-capacity: memory-size,
        /// Available storage
        available-capacity: memory-size,
        /// Supports random access
        has-random-access: bool,
    }
    
    /// Storage type enumeration
    enum storage-type {
        /// RAM-based storage
        ram,
        /// Flash memory
        flash,
        /// Hard disk drive
        hdd,
        /// Solid state drive
        ssd,
        /// Optical disc
        optical,
        /// Network storage
        network,
        /// Cloud storage
        cloud,
    }
    
    /// Platform network capabilities
    /// 
    /// Networking features for connected experiences
    record platform-network-info {
        /// Network interfaces available
        interfaces: list<network-interface>,
        /// Maximum bandwidth (Mbps)
        max-bandwidth-mbps: u32,
        /// Latency characteristics
        latency-class: network-latency-class,
        /// Supports TCP/IP
        has-tcp-ip: bool,
        /// Supports UDP
        has-udp: bool,
        /// Supports WebSockets
        has-websockets: bool,
        /// Supports TLS/SSL
        has-tls: bool,
    }
    
    /// Network interface types
    enum network-interface {
        /// No network interface
        none,
        /// Ethernet
        ethernet,
        /// WiFi
        wifi,
        /// Cellular
        cellular,
        /// Bluetooth
        bluetooth,
        /// USB networking
        usb,
    }
    
    /// Network latency characteristics
    enum network-latency-class {
        /// No network
        none,
        /// High latency (>500ms)
        high,
        /// Medium latency (100-500ms)
        medium,
        /// Low latency (<100ms)
        low,
        /// Ultra-low latency (<10ms)
        ultra-low,
    }
    
    /// Platform feature flags
    /// 
    /// Individual platform capabilities for feature detection
    enum platform-feature {
        /// Multitasking support
        multitasking,
        /// Real-time capabilities
        real-time,
        /// File system access
        file-system,
        /// Memory mapped files
        memory-mapped-files,
        /// Threading support
        threading,
        /// Atomic operations
        atomics,
        /// Exception handling
        exceptions,
        /// Dynamic linking
        dynamic-linking,
        /// JIT compilation
        jit-compilation,
        /// Garbage collection
        garbage-collection,
        /// Audio playback
        audio-playback,
        /// Audio recording
        audio-recording,
        /// Video playback
        video-playback,
        /// Camera access
        camera,
        /// Sensors
        sensors,
        /// GPS/location
        location,
        /// Push notifications
        push-notifications,
        /// Background processing
        background-processing,
    }
    
    /// Platform build configuration
    /// 
    /// Build system integration for platform targeting
    record platform-build-config {
        /// Target triple
        target-triple: string,
        /// Compiler toolchain
        toolchain: string,
        /// Compilation flags
        compile-flags: list<string>,
        /// Linker flags
        link-flags: list<string>,
        /// Required libraries
        required-libs: list<string>,
        /// Asset processing pipeline
        asset-pipeline: string,
        /// Packaging format
        package-format: string,
        /// Deployment method
        deployment-method: string,
    }
    
    /// V6R-specific platform extensions
    /// 
    /// Enhanced capabilities for V6R cloud environments
    record v6r-platform-extensions {
        /// VM size configuration
        vm-size: v6r-vm-size,
        /// Container runtime
        container-runtime: string,
        /// Orchestration platform
        orchestration: string,
        /// Scaling capabilities
        auto-scaling: bool,
        /// Load balancing
        load-balancing: bool,
        /// Service mesh integration
        service-mesh: bool,
        /// Monitoring integration
        monitoring: bool,
    }
    
    /// V6R VM size configurations
    enum v6r-vm-size {
        /// 512MB development VMs
        small,
        /// 1GB standard VMs
        medium,
        /// 2GB+ intensive VMs
        large,
        /// Custom VM configuration
        custom,
    }
}

/// Platform detection and adaptation interface
/// 
/// Runtime platform detection and capability adaptation
interface platform-detection {
    use platform-types.{platform-info, platform-capability, platform-feature, flight-result};
    
    /// Detect current platform
    /// 
    /// Returns comprehensive platform information for current environment
    detect-platform: func() -> flight-result<platform-info>;
    
    /// Check if feature is supported
    /// 
    /// Tests platform capability for specific feature
    has-feature: func(feature: platform-feature) -> bool;
    
    /// Get platform capability level
    /// 
    /// Returns overall capability classification
    get-capability-level: func() -> platform-capability;
    
    /// Adapt feature for platform
    /// 
    /// Returns platform-appropriate implementation strategy
    adapt-feature: func(
        feature: platform-feature,
        requested-level: platform-capability
    ) -> platform-adaptation-strategy;
    
    /// Platform adaptation strategy
    enum platform-adaptation-strategy {
        /// Use full feature implementation
        full-implementation,
        /// Use reduced feature set
        reduced-implementation,
        /// Use alternative implementation
        alternative-implementation,
        /// Feature not available
        not-available,
        /// Defer to runtime detection
        runtime-detection,
    }
    
    /// Get platform-specific configuration
    /// 
    /// Returns optimized configuration for current platform
    get-platform-config: func() -> flight-result<platform-config>;
    
    /// Platform-specific configuration
    record platform-config {
        /// Memory allocation strategy
        memory-strategy: memory-allocation-strategy,
        /// Rendering strategy
        graphics-strategy: graphics-rendering-strategy,
        /// Asset loading strategy
        asset-strategy: asset-loading-strategy,
        /// Threading strategy
        threading-strategy: threading-strategy,
    }
    
    /// Memory allocation strategies
    enum memory-allocation-strategy {
        /// Conservative allocation (Dreamcast)
        conservative,
        /// Balanced allocation (PSP)
        balanced,
        /// Aggressive allocation (modern)
        aggressive,
        /// Dynamic allocation (cloud)
        dynamic,
    }
    
    /// Graphics rendering strategies
    enum graphics-rendering-strategy {
        /// Software rendering
        software,
        /// Hardware-accelerated
        hardware,
        /// Hybrid approach
        hybrid,
        /// Cloud rendering
        cloud,
    }
    
    /// Asset loading strategies
    enum asset-loading-strategy {
        /// Load everything upfront
        preload,
        /// Load on demand
        on-demand,
        /// Streaming loading
        streaming,
        /// Progressive loading
        progressive,
    }
    
    /// Threading strategies
    enum threading-strategy {
        /// Single-threaded
        single-threaded,
        /// Multi-threaded
        multi-threaded,
        /// Actor model
        actor-model,
        /// Async/await
        async-await,
    }
}

/// Platform matrix operations interface
/// 
/// Operations for multi-platform development and deployment
interface platform-matrix {
    use platform-types.{platform-info, platform-category, platform-capability, flight-result};
    
    /// Get all supported platforms
    /// 
    /// Returns complete platform matrix for Flight-Core
    get-supported-platforms: func() -> list<platform-info>;
    
    /// Filter platforms by capability
    /// 
    /// Returns platforms matching capability requirements
    filter-by-capability: func(
        min-capability: platform-capability
    ) -> list<platform-info>;
    
    /// Get platforms by category
    /// 
    /// Returns platforms in specific category
    get-platforms-by-category: func(
        category: platform-category
    ) -> list<platform-info>;
    
    /// Check platform compatibility
    /// 
    /// Validates component compatibility across platforms
    check-compatibility: func(
        source-platform: string,
        target-platform: string
    ) -> flight-result<compatibility-report>;
    
    /// Platform compatibility report
    record compatibility-report {
        /// Overall compatibility status
        compatible: bool,
        /// Compatibility issues found
        issues: list<compatibility-issue>,
        /// Recommended adaptations
        adaptations: list<string>,
        /// Performance impact estimate
        performance-impact: f32,
    }
    
    /// Compatibility issue details
    record compatibility-issue {
        /// Issue category
        category: compatibility-issue-category,
        /// Issue severity
        severity: compatibility-issue-severity,
        /// Issue description
        description: string,
        /// Suggested resolution
        resolution: option<string>,
    }
    
    /// Compatibility issue categories
    enum compatibility-issue-category {
        /// Memory constraint violation
        memory-constraint,
        /// Missing platform feature
        missing-feature,
        /// Performance degradation
        performance,
        /// API compatibility
        api-compatibility,
        /// Build system incompatibility
        build-system,
    }
    
    /// Compatibility issue severity
    enum compatibility-issue-severity {
        /// Informational only
        info,
        /// Minor issue - workaround available
        minor,
        /// Major issue - significant impact
        major,
        /// Blocking issue - prevents deployment
        blocking,
    }
}

/// Flight Platform World - Component Model entry point
world flight-platform {
    export platform-types;
    export platform-detection;
    export platform-matrix;
}
